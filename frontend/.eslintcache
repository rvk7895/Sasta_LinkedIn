[{"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/index.js":"1","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/App.js":"2","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/reportWebVitals.js":"3","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/landing/landing.js":"4","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/userContext/userContext.js":"5","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/singIn/singIn.js":"6","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/signUp/SignUp.js":"7","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/profile.js":"8","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/navbar/navbar.js":"9","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/application.js":"10","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/jobs.js":"11","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/display.js":"12","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/edit.js":"13","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/loader/loader.js":"14","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/recJobs.js":"15","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/recApplication.js":"16","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/createEditJob.js":"17","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/employees/Employees.js":"18","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/myJobs/MyJobs.js":"19"},{"size":548,"mtime":1610988085838,"results":"20","hashOfConfig":"21"},{"size":1761,"mtime":1611403619930,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1610988085838,"results":"23","hashOfConfig":"21"},{"size":1330,"mtime":1611669358540,"results":"24","hashOfConfig":"21"},{"size":85,"mtime":1610988085838,"results":"25","hashOfConfig":"21"},{"size":4322,"mtime":1611415280140,"results":"26","hashOfConfig":"21"},{"size":5905,"mtime":1611669423900,"results":"27","hashOfConfig":"21"},{"size":2178,"mtime":1611137778180,"results":"28","hashOfConfig":"21"},{"size":2675,"mtime":1611563445395,"results":"29","hashOfConfig":"21"},{"size":4325,"mtime":1611400315520,"results":"30","hashOfConfig":"21"},{"size":14824,"mtime":1611670104620,"results":"31","hashOfConfig":"21"},{"size":6861,"mtime":1611577182685,"results":"32","hashOfConfig":"21"},{"size":11935,"mtime":1611572805045,"results":"33","hashOfConfig":"21"},{"size":208,"mtime":1610988085838,"results":"34","hashOfConfig":"21"},{"size":12194,"mtime":1611577389245,"results":"35","hashOfConfig":"21"},{"size":11938,"mtime":1611598328915,"results":"36","hashOfConfig":"21"},{"size":14439,"mtime":1611480493540,"results":"37","hashOfConfig":"21"},{"size":10960,"mtime":1611595514605,"results":"38","hashOfConfig":"21"},{"size":6125,"mtime":1611597500085,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"16a9wqr",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/index.js",[],["89","90"],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/App.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/reportWebVitals.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/landing/landing.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/userContext/userContext.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/singIn/singIn.js",["91"],"import React, { useState, useContext, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { Alert, Container, Jumbotron, Form, Row, Col, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\nimport axios from 'axios'\nimport jwt_decode from \"jwt-decode\";\nimport { UserContext } from '../userContext/userContext'\n\nconst SingIn = () => {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [alert, setAlert] = useState(false);\n    const [error, setError] = useState('');\n    const userContext = useContext(UserContext);\n    const [redirect, setRedirect] = useState(false);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const res = await axios.post('/api/users/login', {\n                password,\n                email\n            })\n            if (res.data.status === 800) {\n                setError(res.data.message);\n                setAlert(true);\n            }\n            if (res.data.status === 200) {\n                const user = jwt_decode(res.data.token);\n                console.log(user);\n                localStorage.setItem('LinkedInid', user.id);\n                localStorage.setItem('LinkedInRole', user.role);\n                userContext.setId(user.id);\n                userContext.setRole(localStorage.getItem('LinkedInRole'));\n                console.log(userContext.id);\n                console.log(userContext.role);\n                if (userContext.id && userContext.role) setRedirect(true);\n            }\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    useEffect(()=>{\n       if(!userContext.id) userContext.setId(localStorage.getItem('LinkedInid'));\n       if(!userContext.role) userContext.setRole(localStorage.getItem('LinkedInRole'));\n       if (userContext.id && userContext.role) setRedirect(true);\n    },[userContext.id, userContext.role])\n\n    return (\n        <div>\n            <Jumbotron>\n                <p className=\"display-3\"> Sign In </p>\n            </Jumbotron>\n            <Alert>\n\n            </Alert>\n            <Container className='align-item-center'>\n                {alert &&\n                    <Alert variant='danger' onClose={() => setAlert(false)} dismissible>\n                        {error}\n                    </Alert>\n                }\n                <form onSubmit={handleSubmit}>\n                    <Form.Group controlId='formEmail' className=\"justify-content-center mb-3\">\n                        <Row>\n                            <Form.Label column sm={12} style={{ fontSize: '20px' }}>Email</Form.Label>\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <Form.Control type='email' value={email} placeholder=\"Email\" onChange={e => setEmail(e.target.value)} />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                    <Form.Group controlId='formPassword1' className=\"justify-content-center mb-3\">\n                        <Row>\n                            <Form.Label column sm={12} style={{ fontSize: '20px' }}>Password</Form.Label>\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <Form.Control type='password' value={password} placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                    <Row className=\"justify-content-center\">\n                        <Col className=\"text-center\">\n                            <Button variant=\"primary\" type=\"submit\" className=\"mb-3\">\n                                Login\n                            </Button>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <Link to='/'>\n                                <Button variant=\"danger\" className=\"mb-3\">Go Back</Button>\n                            </Link>\n                        </Col>\n                    </Row>\n                </form>\n            </Container>\n            {redirect && <Redirect to={`/profile/${userContext.id}`} />}\n        </div>\n    )\n}\n\nexport default SingIn\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/signUp/SignUp.js",["92","93"],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/profile.js",["94","95"],"import React, { useState, useEffect, useContext } from 'react'\nimport { Row, Col, Button, Container } from 'react-bootstrap'\nimport axios from 'axios'\nimport Display from './display'\nimport Edit from './edit'\nimport CustomNav from '../navbar/navbar'\nimport Loader from '../loader/loader'\nimport { UserContext } from '../userContext/userContext'\n\nconst Profile = (props) => {\n\n    const [edit, setEdit] = useState(false);\n    const [user, setUser] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const { id } = useContext(UserContext);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/users/user/${props.match.params.id}`)\n                setUser(res.data);\n                setLoaded(true);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        fetchData();\n    }, [])\n\n\n    const handleEdit = async () => {\n        try {\n            const res = await axios.post('/api/users/update', user);\n            setEdit(false);\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n                {id === props.match.params.id && \n                    < Row className=\"text-right\">\n                    <Col style={{ marginRight: '100px' }}>\n                    {!edit ? (\n                        <Button variant=\"outline-info\" onClick={() => setEdit(true)}>Edit Profile</Button>\n                    ) : (\n                            <div>\n                                <Button variant=\"outline-success\" className=\"ml-3\" onClick={handleEdit}>Save</Button>\n                                <Button variant=\"outline-danger\" className=\"ml-3\" onClick={() => setEdit(false)}>Cancel</Button>\n                            </div>\n                        )}\n                </Col>\n                </Row>}\n\n            {!loaded ? (<Row className=\"justify-content-center\"><Loader /></Row>) : !edit ? <Display user={user} /> : <Edit user={user} setUser={setUser} />}\n            </Container>\n        </div >\n    )\n}\n\nexport default Profile\n\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/navbar/navbar.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/application.js",["96","97","98","99","100"],"import React, { useState, useEffect } from 'react'\nimport { Container, Jumbotron, Row, Card, Col } from 'react-bootstrap';\nimport CustomNav from '../navbar/navbar';\nimport axios from 'axios'\nimport Loader from '../loader/loader';\nimport { v4 as uid } from 'uuid'\n\nconst App = (props) => {\n\n    const [app, setApp] = useState(props.app);\n    const [job, setJob] = useState({});\n    const [recruiter, setRecruiter] = useState({});\n    const [modal, setModal] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n\n        const fetchRecruiter = async () => {\n            try {\n                console.log(job.recruiter_id);\n                const res = await axios.get(`/api/users/user/${job.recruiter_id}`);\n                console.log(res)\n                setRecruiter(res.data);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/jobs/job/${app.job_id}`)\n                console.log(res);\n                if (!job._id) setJob(res.data);\n                console.log(job);\n                if (job._id) {\n                    fetchRecruiter();\n                }\n                if (recruiter) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        fetchData();\n    }, [job])\n\n    return (\n        <div className=\"mb-3\">\n            <Card>\n                {!loaded ? <Row className=\"justify-content-center text-center\"><Loader /></Row> : <div>\n                    <Row style={{ margin: \"0.1rem\" }}>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Job Title:</span>{` ${job.title}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Recruiter Name:</span>{` ${recruiter.name}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Recruiter Email:</span>{` ${recruiter.email}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <span style={{fontWeight:\"bold\"}}>Status:</span>{app.status === 'accepted' ? <p style={{ color: \"green\" }}> Accepted</p> :\n                                app.status === 'rejected' || app.status === 'deleted' ? <p style={{ color: \"red\" }}>{` ${app.status.charAt(0).toUpperCase() + app.status.substr(1).toLowerCase()}`}</p> :\n                                    <p> Pending</p>}\n                        </Col>\n                    </Row>\n                </div>}\n            </Card>\n        </div>\n    )\n}\n\nconst Application = (props) => {\n    const [applications, setApplications] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/applications/app/${props.match.params.id}`)\n                console.log(res);\n                console.log(applications.length)\n                setApplications(res.data);\n                if (applications) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }\n        , [props])\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1>My Applications</h1>\n            </Jumbotron>\n            <div style={{ margin: \"40px\" }} />\n            <Container>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {applications.length === 0 ? <Row className=\"text-center justify-content-center\">Kahin apply nahi kia toh yahan par kyon aaye ho puttar</Row> : (\n                            <div>\n                                {applications.map(app => <App key={uid()} app={app} />)}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </Container>\n        </div>\n    )\n}\n\nexport default Application\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/jobs.js",["101","102","103","104"],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/display.js",["105","106","107"],"import React, { useEffect, useContext, useState } from 'react'\nimport { Container, Row, Image, Col, Card, Badge, Button } from 'react-bootstrap'\nimport { UserContext } from '../userContext/userContext'\nimport { v4 as uid } from 'uuid';\nimport Base64Downloader from 'react-base64-downloader';\n\nconst Recruiter = (props) => {\n    const user = props.user;\n\n    return (\n        <div>\n            <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                <Col sm={6} className=\"text-right\"> Contact No. :</Col>\n                <Col sm={6} >{user.contact_no}</Col>\n            </Row>\n            <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                <Col sm={6} className=\"text-right\">Bio :</Col>\n                <Col sm={6} />\n            </Row>\n            <Row className=\"text-center justify-content-center\" style={{ fontSize: \"1.25rem\" }}>\n                {user.hasOwnProperty('bio') ? user.bio : 'kuch bhi nahi hai iske baare mein'}\n            </Row>\n        </div>\n    )\n}\n\nconst Applicant = (props) => {\n    const { user } = props;\n    const [rating, setRating] = useState(0);\n\n    useEffect(() => {\n        console.log(user);\n        let netRating = user.rating.length === 0 ? 0 : user.rating.length === 1 ? user.rating[0].rating : user.rating.reduce((a, b) => a.rating + b.rating) / user.rating.length;\n        console.log(netRating);\n        setRating(netRating);\n    }, [])\n\n    return (\n        <div>\n            <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                <Col sm={6} className=\"text-right\"> Rating :</Col>\n                <Col sm={6} >{rating}</Col>\n            </Row>\n            <Row>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Educational Institutes\n                </Row>\n                    {user.insti.length ? (\n                        <div>\n                            {user.insti.map(ins =>\n                                <div key={uid()}>\n                                    <Card className=\"mb-3\">\n                                        <Card.Body>\n                                            <Row className=\"mb-1\">\n                                                <Col sm={12}>\n                                                    <h2>{ins.name}</h2>\n                                                </Col>\n                                            </Row>\n                                            <Row className=\"mb-1\">\n                                                <Col sm={12} className=\"text-left\">\n                                                    {ins.starty} - {ins.endy}\n                                                </Col>\n                                            </Row>\n                                        </Card.Body>\n                                    </Card>\n                                </div>\n                            )}\n                        </div>\n                    ) : (\n                            <div className=\"text-center\">\n                                Padhai vadhai karo yeh kya kar rahe ho\n                            </div>\n                        )}\n                </Col>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Skills\n                </Row>\n                    {user.skills.length ? (\n                        <div>\n                            {user.skills.map(skill => <Badge key={uid()} pill variant=\"info\" style={{ margin: \"5px\", fontSize: \"30px\" }}>{skill.name}</Badge>)}\n                        </div>\n                    ) :\n                        (\n                            <div className=\"text-center\">\n                                Kuch nahi ata isko\n                            </div>\n                        )}\n                </Col>\n            </Row>\n            <Row className='justify-content-center'>\n                <Button download={`${user.name}_CV.pdf`} href={user.CV}> Download CV </Button>\n            </Row>\n            <div style={{ margin: \"40px\" }} />\n        </div>\n    )\n}\n\nconst Display = (props) => {\n\n    const { user } = props;\n    const { id } = useContext(UserContext);\n    // const [userRating, setUserRating] = useState(0);\n    // let finalRating = 0.0;\n\n    // const calcRating = () => {\n    //     const { rating } = user;\n    //     let total = 0;\n    //     rating.forEach(rating => total + rating.rating);\n    //     finalRating = total / rating.lenght;\n    // }\n\n    // useEffect(() => {\n    //     console.log(props)\n    //     console.log(id)\n    // }, [user])\n\n    return (\n        <div>\n            <div style={{ margin: \"20px\" }} />\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Image src={user.profile_picture} roundedCircle style={{ height: '300px', width: '300px', borderStyle: \"solid\", borderWidth: \"5px\" }} />\n                </Row>\n                <div style={{ margin: \"40px\" }} />\n                {/* <Row className=\"justify-content-center mb-3\">\n                    <Col>Rating: {finalRating}</Col>\n                    {id !== user._id &&\n                        <Col>\n                            <Dropdown variant='secondary' title=\"Give Rating\">\n                                <Dropdown.Item onClick={()=>setUserRating(1)}>1</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(2)}>2</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(3)}>3</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(4)}>4</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(5)}>5</Dropdown.Item>\n                            </Dropdown>\n                        </Col>}\n                </Row> */}\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Name :</Col>\n                    <Col sm={6} >{user.name}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Email :</Col>\n                    <Col sm={6} >{user.email}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Role :</Col>\n                    <Col sm={6} >{user.role}</Col>\n                </Row>\n                {user.role === 'recruiter' ? <Recruiter user={user} /> : <Applicant user={user} />}\n            </Container>\n        </div>\n    )\n}\n\nexport default Display\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/edit.js",["108"],"import React, { useEffect, useState } from 'react'\nimport { Container, Row, Col, Image, Form, InputGroup, FormControl, Button, DropdownButton, Dropdown } from 'react-bootstrap'\nimport { v4 as uid } from 'uuid'\nimport FileBase64 from 'react-file-base64';\n\nconst Recruiter = (props) => {\n\n    const {\n        user, setUser\n    } = props\n\n    return (\n        <div>\n            <Form.Group controlId='formContact' className=\"justify-content-center mb-3\">\n                <Row>\n                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Contact No.</Form.Label>\n                </Row>\n                <Row>\n                    <Col sm={12}>\n                        <Form.Control type='text' value={user.contact_no} placeholder=\"Contact No.\" onChange={e => setUser({ ...user, contact_no: e.target.value })} />\n                    </Col>\n                </Row>\n            </Form.Group>\n            <Form.Group controlId='formBio' className=\"justify-content-center mb-3\">\n                <Row>\n                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Bio</Form.Label>\n                </Row>\n                <Row>\n                    <Col sm={12}>\n                        <Form.Control as=\"textarea\" rows={3} value={user.bio} placeholder=\"Bio\" onChange={e => setUser({ ...user, bio: e.target.value })} />\n                    </Col>\n                </Row>\n            </Form.Group>\n        </div>\n    )\n}\n\nconst Applicant = (props) => {\n\n    const { user,\n        setUser\n    } = props;\n\n    const [insti, setInsti] = useState(user.insti)\n    const [skills, setSkills] = useState(user.skills)\n\n    const skillCheck = () => {\n        if (skills.length !== user.skills.length) return true\n        for (let i = 0; i < user.skills.length; i++) {\n            let flag = false;\n            for (let j = 0; j < skills.length; j++) {\n                if (skills[j].id === user.skills[i].id && skills[j].name === user.skills[i].name && skills[j].starty === user.skills[i].starty && skills[j].endy === user.skills[i].endy) flag = true\n            }\n            if (!flag) return true\n        }\n\n        return false;\n    }\n\n    const lengthCheck = () => {\n        if (insti.length !== user.insti.length) return true\n        for (let i = 0; i < user.insti.length; i++) {\n            let flag = false;\n            for (let j = 0; j < insti.length; j++) {\n                if (insti[j].id === user.insti[i].id && insti[j].name === user.insti[i].name && insti[j].starty === user.insti[i].starty && insti[j].endy === user.insti[i].endy) flag = true\n            }\n            if (!flag) return true\n        }\n\n        return false;\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Educational Institutes\n                </Row>\n                    {insti.map(ins => <div key={ins.id}>\n                        <Row className=\"mb-3\">\n                            <Col sm={9}>\n                                <Form.Control type='text' value={ins.name} onChange={e => {\n                                    const name = e.target.value\n                                    setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                        ...insti,\n                                        name\n                                    } : insti));\n                                }} placeholder=\"Name of Institution\"></Form.Control>\n                            </Col>\n                            <Col sm={3}>\n                                <Button onClick={() => {\n                                    setInsti(currInsti => currInsti.filter(x => x.id !== ins.id))\n                                }} variant='outline-danger' block>Delete</Button>\n                            </Col>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col>\n                                <Form.Control type='text' value={ins.starty} onChange={e => {\n                                    const starty = e.target.value\n                                    setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                        ...insti,\n                                        starty\n                                    } : insti));\n                                }} placeholder=\"Starting year\"></Form.Control>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl type='text' value={ins.endy} onChange={e => {\n                                        const endy = e.target.value\n                                        setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                            ...insti,\n                                            endy\n                                        } : insti));\n                                    }} placeholder=\"Ending Year\">\n                                    </FormControl>\n                                    <InputGroup.Append>\n                                        <Button variant=\"outline-secondary\" onClick={() => {\n                                            const endy = \"Present\";\n                                            setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                                ...insti,\n                                                endy\n                                            } : insti));\n                                        }} >Present</Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </div>)}\n                    {lengthCheck() &&\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => { setUser({ ...user, insti }); console.log(user) }}>Save</Button>\n                        </Row>}\n                    <Row className=\"justify-content-center mb-3\" >\n                        <Button onClick={() => setInsti([...insti, { id: uid(), name: \"\", starty: \"\", endy: \"\" }])} variant='outline-info' >Insert Institution</Button>\n                    </Row>\n                </Col>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Skills\n                    </Row>\n                    {skills.map(skill =>\n                        <div key={skill.id}>\n                            <Row className=\"mb-3\">\n                                <Col sm={9}>\n                                    <Form.Control type='text' value={skill.name} onChange={e => {\n                                        const name = e.target.value\n                                        setSkills(currSkills => currSkills.map(currSkill => currSkill.id === skill.id ? {\n                                            ...currSkill,\n                                            name\n                                        } : currSkill));\n                                    }} placeholder=\"Skill name\"></Form.Control>\n                                </Col>\n                                <Col sm={3}>\n                                    <Button onClick={() => {\n                                        setSkills(currSkills => currSkills.filter(x => x.id !== skill.id))\n                                    }} variant='outline-danger' block>Delete</Button>\n                                </Col>\n                            </Row>\n                        </div>)}\n                    {skillCheck() &&\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => { setUser({ ...user, skills }) }}>Save</Button>\n                        </Row>}\n                    <Row className=\"justify-content-center mb-3\">\n                        <DropdownButton title=\"Choose\">\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Python\" }])}>Python</Dropdown.Item>\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Java\" }])}>Java</Dropdown.Item>\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"C++\" }])}>C++</Dropdown.Item>\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"C#\" }])}>C#</Dropdown.Item>\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Go\" }])}>Go</Dropdown.Item>\n                            <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Julia\" }])}>Julia</Dropdown.Item>\n                        </DropdownButton>\n                    </Row>\n                    <Row className=\"justify-content-center mb-3\" >\n                        <Button onClick={() => setSkills([...skills, { id: uid(), name: \"\" }])} variant='outline-info' >Insert Skill</Button>\n                    </Row>\n                </Col>\n            </Row>\n            <Row className=\"justify-content-center\">\n                <Col className=\"text-right\" sm={6} style={{ fontSize: \"2rem\" }}>\n                    Upload CV :\n                    </Col>\n                <Col className=\"justify-content-start my-auto\">\n                    <FileBase64 onDone={e => setUser({ ...user, CV: e.base64 })} className=\"btn btn-secondary\" />\n                </Col>\n            </Row>\n            <div style={{ margin: \"40px\" }} />\n        </div>\n    )\n}\n\nconst Edit = (props) => {\n\n    const {\n        user,\n        setUser\n    } = props\n\n    return (\n        <div>\n            <div style={{ margin: \"20px\" }} />\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Image src={user.profile_picture} roundedCircle style={{ height: '300px', width: '300px', borderStyle: \"solid\", borderWidth: \"5px\" }} />\n                </Row>\n                <div style={{ margin: \"40px\" }} />\n                <Row className=\"justify-content-center\">\n                    <Col sm={6} className=\"text-right\">\n                        Change Profile Picture\n                    </Col>\n                    <Col>\n                        <FileBase64 onDone={e => setUser({ ...user, profile_picture: e.base64 })} className=\"btn btn-secondary\" />\n                    </Col>\n                </Row>\n                <Form.Group controlId='formName' className=\"justify-content-center mb-3\">\n                    <Row>\n                        <Form.Label column sm={12} style={{ fontSize: '20px' }}>Name</Form.Label>\n                    </Row>\n                    <Row>\n                        <Col sm={12}>\n                            <Form.Control type='text' value={user.name} placeholder=\"Name\" onChange={e => setUser({ ...user, name: e.target.value })} />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Email :</Col>\n                    <Col sm={6} >{user.email}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Role :</Col>\n                    <Col sm={6} >{user.role}</Col>\n                </Row>\n                {user.role === 'recruiter' ? <Recruiter user={user} setUser={setUser} /> : <Applicant user={user} setUser={setUser} />}\n            </Container>\n        </div>\n    )\n}\n\nexport default Edit\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/loader/loader.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/recJobs.js",["109","110","111","112","113","114","115","116"],"import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Container, Jumbotron, Row, Card, Col, Badge, Button, Modal, FormControl, Alert, Dropdown } from 'react-bootstrap';\nimport CustomNav from '../navbar/navbar';\nimport Loader from '../loader/loader';\nimport { v4 as uid } from 'uuid';\nimport Fuse from 'fuse.js'\nimport CreateEditJob from './createEditJob'\nimport { Link } from 'react-router-dom'\n\nconst Job = (props) => {\n\n    const { job, setAlert, setJobs, jobs } = props;\n    const [loaded, setLoaded] = useState(true);\n    const [modal, setModal] = useState(false);\n    const [SOP, setSOP] = useState('');\n    const [rating, setRating] = useState(0.0);\n\n    const handleDelete = async () => {\n        try {\n            const res = await axios.post('/api/jobs/delete', {\n                id: job._id\n            })\n            console.log(res);\n            setJobs(jobs.filter(currJob => currJob._id !== job._id));\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    useEffect(() => {\n        setLoaded(true);\n    }, [job, modal])\n\n    return (\n        <div>\n            <Card className=\"mb-3\">\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={12} sm={12}>\n                                <h3>{job.title}</h3>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Salary:</span>{` ${job.salary}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Type:</span>{` ${job.type}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Duration:</span>{job.duration === 0 ? \" Indefinite\" : ` ${job.duration} Months`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Deadline:</span>{` ${` ${job.deadline.getDate()}`}-${job.deadline.getMonth() + 1}-${job.deadline.getFullYear()}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Positions Left:</span>{` ${job.pos_left}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Applications Left:</span>{` ${job.app_left}`}</Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={6} sm={12} xs={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Required Skills:</span>{job.req_skills.map(skill => <Badge key={uid()} pill variant=\"info\" style={{ margin: \"0.1rem\" }}>{skill.name}</Badge>)}\n                            </Col>\n                            <Col lg={2} sm={12} xs={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Rating: </span>{job.displayRating}\n                            </Col>\n                            <Col lg={2} sm={12} xs={12} className=\"text-center mb-3\">\n                                <Link to={`/applications/${job._id}`}>\n                                    <Button>\n                                        View Applications\n                                    </Button>\n                                </Link>\n\n                            </Col>\n                            <Col lg={1} sm={12} xs={12} className=\"text-center mb-3\">\n                                <Button variant=\"warning\" onClick={() => setModal(true)}>Edit</Button>\n                            </Col>\n                            <Col lg={1} sm={12} xs={12} className=\"text-center mb-3\">\n                                <Button variant=\"danger\" onClick={handleDelete}>Delete</Button>\n                            </Col>\n                        </Row>\n                        <CreateEditJob show={modal} setModal={setModal} setJobs={setJobs} recruiter_id={job.recruiter_id} jobs={jobs} job={job} setLoaded={setLoaded} func={'edit'} />\n                    </div>)}\n            </Card>\n        </div >\n    )\n}\n\nconst RecJobs = (props) => {\n\n    const [jobs, setJobs] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [alert, setAlert] = useState(false);\n    const [visibleJobs, setVisibleJobs] = useState([]);\n    const [filters, setFilters] = useState({\n        search: '',\n        typeOfJob: '',\n        maxSalary: '',\n        minSalary: '',\n        order: '',\n        duration: 0\n    })\n    const [minSalary, setMinSalary] = useState('');\n    const [maxSalary, setMaxSalary] = useState('');\n    const [modal, setModal] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/jobs/rec/${props.match.params.id}`);\n                res.data = res.data.map(data => { const deadline = new Date(data.deadline); return { ...data, deadline } })\n                console.log(res.data)\n                res.data = res.data.map(job => {\n                    let displayRating = job.rating.length === 0 ? 0 : job.rating.length === 1 ? job.rating[0].rating : job.rating.reduce((a, b) => a.rating + b.rating) / job.rating.length;\n                    return { ...job, displayRating };\n                })\n                setJobs([...res.data]);\n                setVisibleJobs([...res.data]);\n                if (jobs) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        setLoaded(true)\n    }, [visibleJobs])\n\n    useEffect(() => {\n        let filtered = jobs;\n        setLoaded(false);\n\n        //search\n        const fuseOptions = {\n            keys: ['title']\n        }\n\n        const fuse = new Fuse(filtered, fuseOptions);\n        if (filters.search !== '') {\n            const result = fuse.search(filters.search)\n            filtered = result.map(searchResults => searchResults.refIndex).map(idx => filtered[idx])\n        }\n\n        if (filters.typeOfJob !== '') filtered = filtered.filter(job => job.type === filters.typeOfJob);\n        if (filters.minSalary !== '') filtered = filtered.filter(job => job.salary >= parseInt(filters.minSalary));\n        if (filters.maxSalary !== '') filtered = filtered.filter(job => job.salary <= parseInt(filters.maxSalary));\n        if (filters.duration !== 0) filtered = filtered.filter(job => job.duration < filters.duration);\n\n        //order\n        if (filters.order === \"Salary Ascending\") filtered.sort((a, b) => { console.log(\"heelo\"); return a.salary - b.salary })\n        if (filters.order === \"Salary Descending\") filtered.sort((a, b) => -(a.salary - b.salary))\n        if (filters.order === \"Duration Ascending\") filtered.sort((a, b) => a.duration - b.duration)\n        if (filters.order === \"Duration Descending\") filtered.sort((a, b) => -(a.duration - b.duration))\n        if (filters.order === \"Rating Ascending\") filtered.sort((a, b) => a.displayRating - b.displayRating)\n        if (filters.order === \"Rating Descending\") filtered.sort((a, b) => -(a.displayRating - b.displayRating))\n        setVisibleJobs(filtered);\n        if (visibleJobs) setLoaded(true);\n    }, [filters, filters.order, jobs]);\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1>Job Listings</h1>\n            </Jumbotron>\n            <Container fluid style={{ maxWidth: \"1250px\" }}>\n                <Row className=\"justify-content-center mb-3\">\n                    <Col>\n                        <FormControl type=\"text\" value={filters.search} onChange={e => setFilters({ ...filters, search: e.target.value })} placeholder=\"Search\" />\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\">\n                                {filters.typeOfJob === '' ? \"Type of Job\" : filters.typeOfJob}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {['Work from Home', 'Part-Time', 'Full-Time'].map(x => <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, typeOfJob: x })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Row className=\"justfiy-content-center mb-3\">\n                            <Col>\n                                <FormControl value={minSalary} onChange={e => setMinSalary(e.target.value)} type=\"text\" placeholder=\"Min Salary\" />\n                            </Col>\n                            <Col>\n                                <FormControl value={maxSalary} onChange={e => setMaxSalary(e.target.value)} type=\"text\" placeholder=\"Max Salary\" />\n                            </Col>\n                        </Row>\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => setFilters({ ...filters, minSalary, maxSalary })}>Apply Salary</Button>\n                        </Row>\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"150px\" }}>\n                                {filters.duration === 0 ? \"Duration\" : filters.duration}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {[1, 2, 3, 4, 5, 6, 7].map(x => <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, duration: x })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"180px\" }}>\n                                {filters.order === '' ? \"Order\" : filters.order}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {[\"Salary Ascending\", \"Salary Descending\", \"Duration Ascending\", \"Duration Descending\", \"Rating Ascending\", \"Rating Descending\"].map(x =>\n                                    <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, order: `${x}` })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Button variant=\"outline-warning\" onClick={() => {\n                            setFilters({\n                                search: '',\n                                typeOfJob: '',\n                                maxSalary: '',\n                                minSalary: '',\n                                order: '',\n                                duration: 0\n                            }); setMinSalary(''); setMaxSalary(''); setVisibleJobs(jobs);\n                        }}> Clear Filters</Button>\n                    </Col>\n                </Row>\n                <Alert dismissible variant=\"success\" show={alert} onClose={() => setAlert(false)}>Created!</Alert>\n                <Button variant=\"outline-success\" className=\"mb-3\" onClick={() => setModal(true)} block>\n                    Create Job\n                </Button>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {visibleJobs.map((job, idx) => <Job job={job} key={idx} setAlert={setAlert} setJobs={setJobs} jobs={jobs} />)}\n                    </div>\n                )}\n                <CreateEditJob show={modal} setModal={setModal} recruiter_id={props.match.params.id} setJobs={setJobs} jobs={jobs} setLoaded={setLoaded} func={'insert'} setVisibleJobs={setVisibleJobs} visibleJobs={visibleJobs} />\n            </Container>\n        </div>\n    )\n}\n\nexport default RecJobs\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/recApplication.js",["117","118","119","120","121","122","123"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { Container, Jumbotron, Row, Col, Button, Card, Modal, Badge, Dropdown } from 'react-bootstrap'\nimport Loader from '../loader/loader';\nimport CustomNav from '../navbar/navbar'\nimport { Redirect } from 'react-router-dom'\nimport { v4 as uid } from 'uuid'\n\nconst App = (props) => {\n    const [app, setApp] = useState(props.app);\n    const [job, setJob] = useState(props.job);\n    const [applicant, setApplicant] = useState(props.applicant);\n    const [loaded, setLoaded] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n    const [modal, setModal] = useState(false);\n    const [rating, setRating] = useState(0);\n\n    useEffect(() => {\n        setLoaded(true);\n    }, [app]);\n\n    const handleSuccess = async () => {\n        if (app.status === 'pending') {\n            try {\n                const res = await axios.post('/api/applications/shortlist', {\n                    app_id: applicant._id,\n                    job_id: job._id\n                });\n                setApp({ ...app, status: \"shortlisted\" });\n                console.log(res);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n\n        if (app.status === 'shortlisted') {\n            try {\n                const res = await axios.post('/api/applications/accept', {\n                    app_id: applicant._id,\n                    job_id: job._id\n                });\n                setApp({ ...app, status: \"accepted\" });\n                console.log(res);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n    }\n\n    const handleReject = async () => {\n        try {\n            const res = await axios.post('/api/applications/reject', {\n                app_id: applicant._id,\n                job_id: job._id\n            });\n            setApp({ ...app, status: \"rejected\" });\n            console.log(res);\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div className=\"mb-3\">\n            <Card style={{ minHeight: \"70px\" }}>\n                {!loaded ? <Row className=\"justify-content-center text-center\"><Loader /></Row> : <div>\n                    <Row style={{ margin: \"0.1rem\" }}>\n                        <Col className=\"my-auto\">\n                            <Row>\n                                <Col>\n                                    <h3>{applicant.name}</h3>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col>\n                                    <Row>\n                                        <Col>\n                                            Educational Insitutes\n                                        </Col>\n                                    </Row>\n                                    {applicant.insti.map(ins =>\n                                        <div key={uid()}>\n                                            <Card className=\"mb-1\">\n                                                <Card.Body>\n                                                    <Row>\n                                                        <Col sm={12}>\n                                                            <h4>{ins.name}</h4>\n                                                        </Col>\n                                                    </Row>\n                                                    <Row className=\"mb-0\">\n                                                        <Col sm={12} className=\"text-left\">\n                                                            {ins.starty} - {ins.endy}\n                                                        </Col>\n                                                    </Row>\n                                                </Card.Body>\n                                            </Card>\n                                        </div>\n                                    )}\n                                </Col>\n                                <Col className=\"text-center\">\n                                    <Row>\n                                        <Col>\n                                            Skills Possessed\n                                        </Col>\n                                    </Row>\n                                    <div>\n                                        {applicant.skills.map(skill => <Badge key={uid()} pill variant=\"info\" style={{ margin: \"5px\", fontSize: \"15px\" }}>{skill.name}</Badge>)}\n                                    </div>\n                                </Col>\n                                <Col lg={2} xs={12}>\n                                    <p>Applied on :{` ${app.applyingDate.getDate()}-${app.applyingDate.getMonth() + 1}-${app.applyingDate.getFullYear()}`}</p>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col className=\"text-center my-auto\" lg={3} sm={3} xs={12}>\n                            <Row className=\"justify-content-center text-center\">\n                                <h5>Status :{` ${app.status}`}</h5>\n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                <Button variant=\"outline-warning\" className=\"mb-1\" onClick={() => setModal(true)} >View SOP</Button>\n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                {app.status === 'rejected' ? <Col className=\"justify-content-center text-center my-auto\"><Button variant=\"danger\" className=\"mb-1\" disabled>Rejected</Button></Col> : (\n                                    <div>\n                                        <Col className=\"text-center justift-content-center my-auto\">\n                                            <Button disabled={app.status === 'accepted' ? true : false} variant=\"success\" onClick={handleSuccess} className=\"mb-1\">\n                                                {app.status === 'pending' ? 'Shortlist' : 'Accept'}\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"text-center justift-content-center my-auto\">\n                                            <Button variant=\"danger\" disabled={app.status === 'accepted' ? true : false} onClick={handleReject} className=\"mb-1\">Reject</Button>\n                                        </Col>\n                                    </div>\n                                )}\n                            </Row>\n                            <Row className=\"justify-content-center\">\n                                <Button download={`${applicant.name}_CV.pdf`} href={applicant.CV} disabled={applicant.CV === '' ? true : false}>Download CV</Button>\n                            </Row>\n                        </Col>\n                    </Row>\n                </div>}\n                {redirect && <Redirect to={`/profile/${applicant._id}`} />}\n            </Card>\n            <Modal centered size=\"lg\" show={modal} onHide={() => setModal(false)}>\n                <Modal.Header closeButton>\n                    <h3>\n                        SOP\n                    </h3>\n                </Modal.Header>\n                <Modal.Body>\n                    {app.SOP}\n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n\nconst RecApplication = (props) => {\n\n    const [applications, setApplications] = useState([]);\n    const [visibleApps, setVisibileApps] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [job, setJob] = useState();\n    const [order, setOrder] = useState('');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/applications/job/${props.match.params.id}`);\n                console.log(res.data);\n                res.data = res.data.map(user => {\n                    let displayRating = user.applicant.rating.length === 0 ? 0 : user.applicant.rating.length === 1 ? user.applicant.rating[0].rating : user.applicant.rating.reduce((a, b) => a.rating + b.rating) / user.rating.length;\n                    let applyingDate = new Date(user.application.applyingDate);\n                    return { applicant: { ...user.applicant }, application: { ...user.application, applyingDate }, displayRating };\n                })\n                setApplications([...res.data]);\n                setVisibileApps([...res.data]);\n                const res2 = await axios.get(`/api/jobs/job/${props.match.params.id}`);\n                console.log(res2.data);\n                setJob(res2.data);\n                if (job) setLoaded(true)\n                // console.log(res2.data);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }, [])\n\n    useEffect(() => {\n        setLoaded(true);\n    }, [job])\n\n    useEffect(() => {\n        setLoaded(false);\n        let sorted = applications;\n        if (order === \"Name Ascending\") sorted.sort((a, b) => a.applicant.name < b.applicant.name ? -1 : 1);\n        if (order === \"Name Descending\") sorted.sort((a, b) => a.applicant.name > b.applicant.name ? -1 : 1);\n        if (order === \"Date of Applying Ascending\") sorted.sort((a, b) => a.application.applyingDate < b.application.applyingDate ? -1 : 1);\n        if (order === \"Date of Applying Descending\") sorted.sort((a, b) => a.application.applyingDate > b.application.applyingDate ? -1 : 1);\n        if (order === \"Rating Ascending\") sorted.sort((a, b) => a.displayRating < b.displayRating ? -1 : 1);\n        if (order === \"Rating Descending\") sorted.sort((a, b) => a.displayRating > b.displayRating ? -1 : 1);\n\n        setVisibileApps([...sorted]);\n        if (visibleApps && job) setLoaded(true);\n    }, [order])\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (<div>\n                <Jumbotron>\n                    <h1>{`${job.title} `}Applications</h1>\n                </Jumbotron>\n                <Container>\n                    <Row className=\"justify-content-end text-center mb-3\">\n                        <Col className=\"justify-content-center text-center\">\n                            <Dropdown>\n                                <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"300px\" }}>\n                                    {order === '' ? \"Order\" : order}\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu>\n                                    {[\"Name Ascending\", \"Name Descending\", \"Date of Applying Ascending\", \"Date of Applying Descending\", \"Rating Ascending\", \"Rating Descending\"].map(x =>\n                                        <Dropdown.Item key={x} onClick={() => setOrder(x)}>{x}</Dropdown.Item>)}\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                        <Col className=\"text-right\">\n                            <Button variant=\"outline-warning\" onClick={() => setOrder('')}>Clear Filters</Button>\n                        </Col>\n                    </Row>\n                    {visibleApps.length === 0 ? <Row className=\"justify-content-center text-center\">Kisine nahi kia teri jobs mein apply</Row> : (\n                        applications.map(app => app.application.status === 'rejected' ? null : <App app={app.application} applicant={app.applicant} job={job} key={app.application._id} displayRating={app.displayRating} />)\n                    )}\n                </Container>\n            </div>\n            )}\n        </div>\n    )\n}\n\nexport default RecApplication\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/createEditJob.js",["124","125","126","127","128"],"import React, { useEffect, useState } from 'react';\nimport { Modal, Col, Row, Form, Button, DropdownButton, Dropdown } from 'react-bootstrap';\nimport { v4 as uid } from 'uuid'\nimport axios from 'axios'\n// import DateTimeField from 'react-bootstrap-datetimepicker';\n\nconst CreateEditJob = (props) => {\n\n    const { show,\n        setModal,\n        recruiter_id,\n        setJobs,\n        jobs,\n        setLoaded,\n        func,\n        job,\n        setVisibleJobs,\n        visibleJobs\n    } = props;\n\n    const [title, setTitle] = useState('');\n    const [maxApp, setMaxApp] = useState(0);\n    const [maxPos, setMaxPos] = useState(0);\n    const [salary, setSalary] = useState(0);\n    const [type, setType] = useState('');\n    const [deadline, setDeadline] = useState();\n    const [duration, setDuration] = useState(0);\n    const [skills, setSkills] = useState([]);\n    const [savedSkills, setSavedSkills] = useState([]);\n\n    useEffect(() => {\n        if (func === 'edit') {\n            setTitle(job.title);\n            setMaxApp(job.max_app);\n            setMaxPos(job.max_pos);\n            setSalary(job.salary);\n            setType(job.type);\n            setDeadline(`${job.deadline.getFullYear()}-${job.deadline.getMonth() + 1}-${job.deadline.getDate()}`);\n            setDuration(job.duration);\n            setSkills([...job.req_skills]);\n        }\n    }, [])\n\n    useEffect(() => {\n        setModal(false);\n        setLoaded(true);\n    }, [visibleJobs])\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoaded(false);\n        if (func === 'insert') {\n            try {\n                let res = await axios.post('/api/jobs/create', {\n                    title,\n                    max_app: maxApp,\n                    max_pos: maxPos,\n                    salary,\n                    type,\n                    deadline,\n                    duration,\n                    req_skills: skills,\n                    recruiter_id\n                });\n                let newDeadline = new Date(deadline)\n                let pos_left = maxPos\n                let app_left = maxApp\n                console.log(res);\n                res.data.deadline = new Date(res.data.deadline); \n                let x = [...jobs,res.data];\n                await setJobs(x);\n                console.log(visibleJobs);\n                await setVisibleJobs(x);\n                console.log(visibleJobs)\n                // window.location.reload();\n                // setVisibleJobs(vJobs);\n                setModal(false)\n                setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n\n        if (func === 'edit') {\n            try {\n                const res = await axios.post('/api/jobs/edit', {\n                    _id: job._id,\n                    title,\n                    max_app: maxApp,\n                    max_pos: maxPos,\n                    salary,\n                    type,\n                    deadline,\n                    duration,\n                    req_skills: skills,\n                    recruiter_id\n                })\n                console.log(res);\n                let newDeadline = new Date(deadline)\n                let pos_left = job.pos_left + (maxPos - job.max_pos);\n                pos_left = pos_left < 0 ? 0 : pos_left;\n                let app_left = job.app_left + (maxApp - job.max_app);\n                app_left = app_left < 0 ? 0 : app_left;\n\n                setJobs(jobs.map(currJob => currJob._id === job._id ? {\n                    _id: job._id,\n                    title,\n                    max_app: maxApp,\n                    max_pos: maxPos,\n                    salary,\n                    type,\n                    deadline: newDeadline,\n                    duration,\n                    req_skills: skills,\n                    recruiter_id,\n                    pos_left,\n                    app_left\n                } : currJob));\n\n                setVisibleJobs(visibleJobs.map(currJob => currJob._id === job._id ? {\n                    _id: job._id,\n                    title,\n                    max_app: maxApp,\n                    max_pos: maxPos,\n                    salary,\n                    type,\n                    deadline: newDeadline,\n                    duration,\n                    req_skills: skills,\n                    recruiter_id,\n                    pos_left,\n                    app_left\n                } : currJob));\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n    }\n\n\n\n    const skillCheck = () => {\n        if (skills.length !== savedSkills.length) return true\n        for (let i = 0; i < savedSkills.length; i++) {\n            let flag = false;\n            for (let j = 0; j < skills.length; j++) {\n                if (skills[j].id === savedSkills[i].id && skills[j].name === savedSkills[i].name) flag = true\n            }\n            if (!flag) return true\n        }\n\n        return false;\n    }\n\n    return (\n        <Modal centered size=\"lg\" show={show} onHide={() => setModal(false)}>\n            <Modal.Header closeButton>\n                <h3>\n                    Create Job\n                </h3>\n            </Modal.Header>\n            <Modal.Body>\n                <form onSubmit={handleSubmit}>\n                    <Form.Group controlId='formTitle' className=\"justify-content-center mb-3\">\n                        <Row>\n                            <Form.Label column sm={12} style={{ fontSize: '20px' }}>Title</Form.Label>\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <Form.Control type='text' value={title} placeholder=\"Name\" onChange={e => setTitle(e.target.value)} />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                    <Row>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Max Applications</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control type='number' value={maxApp} placeholder=\"Max Applications\" onChange={e => setMaxApp(e.target.value)} />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Max Positions</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control type='number' value={maxPos} placeholder=\"Max Positions\" onChange={e => setMaxPos(e.target.value)} />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Salary</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control type='number' value={salary} placeholder=\"Salary\" onChange={e => setSalary(e.target.value)} />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Type of Job</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control as='select' value={type} placeholder=\"Type of Job\" onChange={e => setType(e.target.value)} >\n                                            <option />\n                                            <option>Part-Time</option>\n                                            <option>Full-Time</option>\n                                            <option>Work from Home</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Deadline</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control type='text' value={deadline} placeholder=\"YYYY-MM-DD\" onChange={e => setDeadline(e.target.value)} />\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                        <Col lg={6} sm={12}>\n                            <Form.Group className=\"justify-content-center mb-3\">\n                                <Row>\n                                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Duration</Form.Label>\n                                </Row>\n                                <Row>\n                                    <Col sm={12}>\n                                        <Form.Control as='select' value={duration} placeholder=\"Duration\" onChange={e => setDuration(parseInt(e.target.value))} >\n                                            <option>0</option>\n                                            <option>1</option>\n                                            <option>2</option>\n                                            <option>3</option>\n                                            <option>4</option>\n                                            <option>5</option>\n                                            <option>6</option>\n                                        </Form.Control>\n                                    </Col>\n                                </Row>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Form.Group className=\"justify-content-center mb-3\">\n                        <Row>\n                            <Form.Label column sm={12} style={{ fontSize: '20px' }}>Skills Required</Form.Label>\n                        </Row>\n                        {skills.map(skill =>\n                            <div key={uid()}>\n                                <Row className=\"mb-3\">\n                                    <Col sm={9}>\n                                        <Form.Control type='text' value={skill.name} onChange={e => {\n                                            const name = e.target.value\n                                            setSkills(currSkills => currSkills.map(currSkill => currSkill.id === skill.id ? {\n                                                ...currSkill,\n                                                name\n                                            } : currSkill));\n                                        }} placeholder=\"Skill name\"></Form.Control>\n                                    </Col>\n                                    <Col sm={3}>\n                                        <Button onClick={() => {\n                                            setSkills(currSkills => currSkills.filter(x => x.id !== skill.id))\n                                        }} variant='outline-danger' block>Delete</Button>\n                                    </Col>\n                                </Row>\n                            </div>)}\n                        {skillCheck() &&\n                            <Row className=\"justify-content-center mb-3\">\n                                <Button variant=\"outline-success\" onClick={() => setSavedSkills([...skills])}>Save</Button>\n                            </Row>}\n                        <Row className=\"justify-content-center mb-3\">\n                            <DropdownButton title=\"Choose\">\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Python\" }])}>Python</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Java\" }])}>Java</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"C++\" }])}>C++</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"C#\" }])}>C#</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Go\" }])}>Go</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, { id: uid(), name: \"Julia\" }])}>Julia</Dropdown.Item>\n                            </DropdownButton>\n                        </Row>\n                        <Row className=\"justify-content-center mb-3\" >\n                            <Button onClick={() => setSkills([...skills, { id: uid(), name: \"\" }])} variant='outline-info' >Insert Skill</Button>\n                        </Row>\n                    </Form.Group>\n                    <Button type='submit' variant=\"success\" block>{func === 'insert' ? \"Create Job\" : \"Edit Job\"}</Button>\n                </form>\n            </Modal.Body>\n        </Modal>\n    )\n}\n\nexport default CreateEditJob\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/employees/Employees.js",["129","130","131","132","133","134","135","136","137","138"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Container, Jumbotron, Row, Col, Button, Modal, FormControl, Alert, Dropdown } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport Loader from '../loader/loader';\nimport CustomNav from '../navbar/navbar';\n\nconst Employee = (props) => {\n\n    const [employee, setEmployee] = useState(props.employee);\n    const [applicant, setApplicant] = useState(props.applicant);\n    const [job, setJob] = useState(props.job);\n    const [loaded, setLoaded] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n    const [modal, setModal] = useState(false);\n    const [rating, setRating] = useState(0);\n    const [displayRating, setDisplayRating] = useState(props.displayRating);\n    const { setMessage, setAlert, employees, setEmployees } = props;\n    let netRating = 0.0;\n\n    useEffect(() => {\n        setLoaded(false)\n        console.log(props.displayRating)\n        if (applicant && job) setLoaded(true);\n    }, [])\n\n    const handleRating = async () => {\n        try {\n            const res = await axios.post(`/api/users/rating`, {\n                _id: employee.app_id,\n                userId: employee.rec_id,\n                rating\n            })\n            setMessage(res.data.message);\n            setAlert(true);\n            setModal(false);\n            console.log(res);\n\n            props.handleRating(employee.app_id, rating);\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div className=\"mb-3\">\n            <Card>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={12} sm={12}>\n                                <h3>{applicant.name}</h3>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }} className=\"mb-3\">\n                            <Col lg={3} sm={12} xs={12}><span style={{ fontWeight: \"bold\" }}>Job title:</span>{` ${job.title}`}</Col>\n                            <Col lg={3} sm={12} xs={12} className=\"text-center\"><span style={{ fontWeight: \"bold\" }}>Date of Joining:</span>{` ${` ${employee.dateOfJoining.getDate()}`}-${employee.dateOfJoining.getMonth() + 1}-${employee.dateOfJoining.getFullYear()}`}</Col>\n                            <Col lg={3} sm={12} xs={12} className=\"text-center\"><span style={{ fontWeight: \"bold\" }}>Job type:</span>{` ${job.type}`}</Col>\n                            <Col lg={3} sm={12} xs={12} className=\"text-right\"><span style={{ fontWeight: \"bold\" }}>Rating:</span>{` ${displayRating}`}</Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }} className=\"justify-content-center mb-3\">\n                            <Col lg={6} sm={12} xs={12} className=\"text-center\">\n                                <Button variant=\"outline-info\" onClick={() => setRedirect(true)}>View Profile</Button>\n                            </Col>\n                            <Col lg={6} sm={12} xs={12} className=\"text-center\">\n                                <Button variant=\"outline-warning\" onClick={() => setModal(true)}>Give Rating</Button>\n                            </Col>\n                        </Row>\n                    </div>\n                )}\n            </Card>\n            <Modal show={modal} onHide={() => setModal(false)} centered>\n                <Modal.Header closeButton>\n                    <h3>\n                        Give Rating\n                    </h3>\n                </Modal.Header>\n                <Modal.Body>\n                    <Row className=\"mb-3\">\n                        <Col>\n                            <FormControl as='select' value={rating} placeholder=\"Duration\" onChange={e => setRating(parseInt(e.target.value))}>\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </FormControl>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Button onClick={handleRating} variant=\"success\" block>Submit</Button>\n                        </Col>\n                    </Row>\n                </Modal.Body>\n            </Modal>\n            {redirect && <Redirect to={`/profile/${applicant._id}`} />}\n        </div>\n    )\n};\n\nconst Employees = (props) => {\n\n    const [employees, setEmployees] = useState([]);\n    const [visibleEmployees, setVisibleEmployees] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [message, setMessage] = useState('');\n    const [alert, setAlert] = useState('');\n    const [order, setOrder] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setLoaded(false);\n            const res = await axios.get(`/api/applications/employees/${props.match.params.id}`);\n            res.data = res.data.map(user => {\n                let displayRating = user.applicant.rating.length === 0 ? 0 : user.applicant.rating.length === 1 ? user.applicant.rating[0].rating : user.applicant.rating.reduce((a, b) => a.rating + b.rating) / user.rating.length;\n                let applyingDate = new Date(user.application.applyingDate);\n                let dateOfJoining = new Date(user.application.dateOfJoining);\n                return { applicant: { ...user.applicant }, application: { ...user.application, applyingDate, dateOfJoining }, displayRating, job: { ...user.job } };\n            });\n            setEmployees([...res.data]);\n            setVisibleEmployees([...res.data]);\n            console.log(res.data);\n        };\n        fetchData();\n    }, [])\n\n    const handleRating = (id, rating) => {\n        setLoaded(false)\n        let arr = employees.map(employee => {\n            if (employee.applicant._id === id) {\n                let flag = true;\n                let app_rating = employee.applicant.rating;\n                for (let i = 0; i < app_rating.length; i++) {\n                    if (app_rating[i].userId === employee.application.rec_id) {\n                        flag = false;\n                        app_rating[i].rating = rating;\n                        employee.applicant.rating = [...app_rating]\n                        break;\n                    }\n                }\n                if (flag) {\n                    app_rating.push({ userId: employee.application.rec_id, rating: rating });\n                    employee.applicant.rating = [...app_rating]\n                }\n\n                let netRating = 0.0;\n                for (let i = 0; i < app_rating.length; i++) {\n                    netRating = (netRating + app_rating[i].rating) / app_rating.length;\n                }\n                employee.displayRating = netRating;\n\n                return { application: employee.application, job: employee.job, applicant: { ...employee.applicant, displayRating: netRating }, displayRating: netRating }\n            }\n            else return employee\n        })\n        setEmployees([...arr]);\n        setVisibleEmployees([...arr]);\n    }\n\n    useEffect(() => {\n        setLoaded(true);\n    }, [visibleEmployees])\n\n    useEffect(() => {\n        setLoaded(false);\n        let sorted = employees;\n        if (order === \"Name Ascending\") sorted.sort((a, b) => a.applicant.name < b.applicant.name ? -1 : 1);\n        if (order === \"Name Descending\") sorted.sort((a, b) => a.applicant.name > b.applicant.name ? -1 : 1);\n        if (order === \"Date of Joining Ascending\") sorted.sort((a, b) => a.application.dateOfJoining < b.application.dateOfJoining ? -1 : 1);\n        if (order === \"Date of Joining Descending\") sorted.sort((a, b) => a.application.dateOfJoining > b.application.dateOfJoining ? -1 : 1);\n        if (order === \"Rating Ascending\") sorted.sort((a, b) => a.displayRating < b.displayRating ? -1 : 1);\n        if (order === \"Rating Descending\") sorted.sort((a, b) => a.displayRating > b.displayRating ? -1 : 1);\n        if (order === \"Job Title Ascending\") sorted.sort((a,b)=> a.job.title < b.job.title ? -1 : 1)\n        if (order === \"Job Title Descending\") sorted.sort((a,b)=> a.job.title > b.job.title ? -1 : 1)\n\n        setVisibleEmployees([...sorted]);\n        if (visibleEmployees) setLoaded(true);\n    }, [order])\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1 className=\"display-3\">My Employees</h1>\n            </Jumbotron>\n            <Container>\n                <div style={{ margin: \"40px\" }} />\n                {alert &&\n                    <Alert onClose={() => setAlert(false)} variant=\"success\" dismissible>\n                        {message}\n                    </Alert>\n                }\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {employees.length ? <div>\n                            <Row className=\"justify-content-end text-center mb-3\">\n                                <Col lg={6} className=\"justify-content-center text-center\">\n                                    <Dropdown>\n                                        <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"300px\" }}>\n                                            {order === '' ? \"Order\" : order}\n                                        </Dropdown.Toggle>\n                                        <Dropdown.Menu>\n                                            {[\"Name Ascending\", \"Name Descending\", \"Date of Joining Ascending\", \"Date of Joining Descending\", \"Rating Ascending\", \"Rating Descending\", \"Job Title Ascending\", \"Job Title Descending\"].map(x =>\n                                                <Dropdown.Item key={x} onClick={() => setOrder(x)}>{x}</Dropdown.Item>)}\n                                        </Dropdown.Menu>\n                                    </Dropdown>\n                                </Col>\n                                <Col className=\"text-right\">\n                                    <Button variant=\"outline-warning\" onClick={() => setOrder('')}>Clear Filters</Button>\n                                </Col>\n                            </Row>\n                            {visibleEmployees.map(x => <Employee key={x.applicant._id} employee={x.application} applicant={x.applicant} job={x.job} setMessage={setMessage} setAlert={setAlert} handleRating={handleRating} displayRating={x.displayRating} />)}\n                        </div> : <Row className=\"justify-content-center\">Koi tere lie nahi karta kaam</Row>}\n                    </div>\n                )}\n            </Container>\n        </div>\n    )\n}\n\nexport default Employees\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/myJobs/MyJobs.js",["139","140"],"import React, { useEffect, useState } from 'react'\nimport { Container, Jumbotron, Row, Col, Button, FormControl, Alert } from 'react-bootstrap'\nimport CustomNav from '../navbar/navbar'\nimport axios from 'axios'\nimport Loader from '../loader/loader'\n\nconst MyJob = (props) => {\n\n    const [job, setJob] = useState({});\n    const [application, setApplication] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [recruiter, setRecruiter] = useState({});\n    const [userRating, setUserRating] = useState(0);\n    const [alert, setAlert] = useState(false);\n    const [message, setMessage] = useState();\n    let recRating = 0.0;\n    const [jobRating, setJobRating] = useState(0);\n\n    useEffect(() => {\n        const fetchApplication = async () => {\n            const res = await axios.get(`/api/applications/jobs/${props.match.params.id}`);\n            setApplication(res.data[0].application);\n            setJob(res.data[0].job);\n            setRecruiter(res.data[0].recruiter)\n            let rating = res.data[0].job.rating.length === 0 ? 0 : res.data[0].job.rating.length === 1 ? res.data[0].job.rating[0].rating : res.data[0].job.rating.reduce((a, b) => a.rating + b.rating) / res.data[0].job.rating.length;\n            setJobRating(rating);\n        }\n        fetchApplication();\n    }, []);\n\n    useEffect(() => {\n        setLoaded(true);\n    }, [recruiter])\n\n    const handleRating = async () => {\n        try {\n            const res = await axios.post(`/api/jobs/rating`, {\n                _id: application.job_id,\n                userId: application.app_id,\n                rating: userRating\n            })\n\n            setMessage(res.data.message);\n            setAlert(true);\n            console.log(res);\n\n            let flag = true;\n            let job_rating = job.rating;\n            for (let i = 0; i < job_rating.length; i++) {\n                if (job_rating[i].userId === application.app_id) {\n                    flag = false;\n                    job_rating[i].rating = userRating;\n                    setJob({ ...job, rating: [...job_rating] })\n                    break;\n                }\n            }\n            if (flag) {\n                job_rating.push({ userId: application.app_id, rating: userRating });\n                setJob({ ...job, rating: [...job_rating] })\n            }\n\n            let jobRating = 0.0;\n            for (let i = 0; i < job_rating.length; i++) {\n                jobRating = (jobRating + job_rating[i].rating) / job_rating.length;\n            }\n\n            console.log(jobRating)\n            setJobRating(jobRating);\n        }\n\n        catch(err){\n            console.log(err);\n        }\n    }\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> :\n                (\n                    <div>\n                        {!application ? <Row className=\"text-center\">Kahin nahi karta tu kaam</Row> :\n                            <div>\n                                <Jumbotron>\n                                    <h1 className=\"display-3\">{job.title}</h1>\n                                </Jumbotron>\n                                <Container>\n                                    {alert && <Alert onClose={() => setAlert(false)} variant=\"success\" dismissible>\n                                        {message}\n                                    </Alert>}\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Recruiter Name : \"}</span>{recruiter.name}</Col>\n                                    </Row>\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Recruiter Email : \"}</span>{recruiter.email}</Col>\n                                    </Row>\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Salary : \"}</span>{job.salary}</Col>\n                                    </Row>\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Type of Job : \"}</span>{job.type}</Col>\n                                    </Row>\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Joining Date : \"}</span>{application.dateOfJoining}</Col>\n                                    </Row>\n                                    <Row>\n                                        <Col><span style={{ fontWeight: \"bold\" }}>{\"Job Rating : \"}</span>{jobRating}</Col>\n                                    </Row>\n                                    <Row className=\"mt-3\">\n                                        <h5>Give Job Rating</h5>\n                                    </Row>\n                                    <Row>\n                                        <Col lg={2} sm={6} xs={12}>\n                                            <FormControl as='select' value={userRating} placeholder=\"Duration\" onChange={e => setUserRating(parseInt(e.target.value))}>\n                                                <option>1</option>\n                                                <option>2</option>\n                                                <option>3</option>\n                                                <option>4</option>\n                                                <option>5</option>\n                                            </FormControl>\n                                        </Col>\n                                        <Col lg={2} sm={6} xs={12}>\n                                            <Button onClick={handleRating} variant=\"outline-warning\">Give Rating</Button>\n                                        </Col>\n                                    </Row>\n                                </Container>\n                            </div>\n                        }\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default MyJob\n",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":49,"column":7,"nodeType":"147","endLine":49,"endColumn":41,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":17,"column":13,"nodeType":"151","messageId":"152","endLine":17,"endColumn":15},{"ruleId":"149","severity":1,"message":"153","line":17,"column":17,"nodeType":"151","messageId":"152","endLine":17,"endColumn":22},{"ruleId":"145","severity":1,"message":"154","line":29,"column":8,"nodeType":"147","endLine":29,"endColumn":10,"suggestions":"155"},{"ruleId":"149","severity":1,"message":"156","line":34,"column":19,"nodeType":"151","messageId":"152","endLine":34,"endColumn":22},{"ruleId":"149","severity":1,"message":"157","line":10,"column":17,"nodeType":"151","messageId":"152","endLine":10,"endColumn":23},{"ruleId":"149","severity":1,"message":"158","line":13,"column":12,"nodeType":"151","messageId":"152","endLine":13,"endColumn":17},{"ruleId":"149","severity":1,"message":"159","line":13,"column":19,"nodeType":"151","messageId":"152","endLine":13,"endColumn":27},{"ruleId":"145","severity":1,"message":"160","line":47,"column":8,"nodeType":"147","endLine":47,"endColumn":13,"suggestions":"161"},{"ruleId":"145","severity":1,"message":"162","line":94,"column":11,"nodeType":"147","endLine":94,"endColumn":18,"suggestions":"163"},{"ruleId":"145","severity":1,"message":"164","line":29,"column":8,"nodeType":"147","endLine":29,"endColumn":10,"suggestions":"165"},{"ruleId":"166","severity":1,"message":"167","line":157,"column":60,"nodeType":"168","messageId":"169","endLine":157,"endColumn":62},{"ruleId":"145","severity":1,"message":"170","line":172,"column":8,"nodeType":"147","endLine":172,"endColumn":10,"suggestions":"171"},{"ruleId":"145","severity":1,"message":"172","line":204,"column":8,"nodeType":"147","endLine":204,"endColumn":38,"suggestions":"173"},{"ruleId":"149","severity":1,"message":"174","line":5,"column":8,"nodeType":"151","messageId":"152","endLine":5,"endColumn":24},{"ruleId":"145","severity":1,"message":"175","line":36,"column":8,"nodeType":"147","endLine":36,"endColumn":10,"suggestions":"176"},{"ruleId":"149","severity":1,"message":"150","line":103,"column":13,"nodeType":"151","messageId":"152","endLine":103,"endColumn":15},{"ruleId":"149","severity":1,"message":"177","line":1,"column":17,"nodeType":"151","messageId":"152","endLine":1,"endColumn":26},{"ruleId":"149","severity":1,"message":"178","line":3,"column":63,"nodeType":"151","messageId":"152","endLine":3,"endColumn":68},{"ruleId":"149","severity":1,"message":"179","line":13,"column":18,"nodeType":"151","messageId":"152","endLine":13,"endColumn":26},{"ruleId":"149","severity":1,"message":"180","line":16,"column":12,"nodeType":"151","messageId":"152","endLine":16,"endColumn":15},{"ruleId":"149","severity":1,"message":"181","line":16,"column":17,"nodeType":"151","messageId":"152","endLine":16,"endColumn":23},{"ruleId":"149","severity":1,"message":"182","line":17,"column":12,"nodeType":"151","messageId":"152","endLine":17,"endColumn":18},{"ruleId":"149","severity":1,"message":"183","line":17,"column":20,"nodeType":"151","messageId":"152","endLine":17,"endColumn":29},{"ruleId":"145","severity":1,"message":"170","line":120,"column":8,"nodeType":"147","endLine":120,"endColumn":10,"suggestions":"184"},{"ruleId":"145","severity":1,"message":"172","line":155,"column":8,"nodeType":"147","endLine":155,"endColumn":38,"suggestions":"185"},{"ruleId":"149","severity":1,"message":"186","line":11,"column":17,"nodeType":"151","messageId":"152","endLine":11,"endColumn":23},{"ruleId":"149","severity":1,"message":"187","line":12,"column":23,"nodeType":"151","messageId":"152","endLine":12,"endColumn":35},{"ruleId":"149","severity":1,"message":"188","line":14,"column":22,"nodeType":"151","messageId":"152","endLine":14,"endColumn":33},{"ruleId":"149","severity":1,"message":"182","line":16,"column":12,"nodeType":"151","messageId":"152","endLine":16,"endColumn":18},{"ruleId":"149","severity":1,"message":"183","line":16,"column":20,"nodeType":"151","messageId":"152","endLine":16,"endColumn":29},{"ruleId":"145","severity":1,"message":"189","line":192,"column":8,"nodeType":"147","endLine":192,"endColumn":10,"suggestions":"190"},{"ruleId":"145","severity":1,"message":"191","line":210,"column":8,"nodeType":"147","endLine":210,"endColumn":15,"suggestions":"192"},{"ruleId":"145","severity":1,"message":"193","line":42,"column":8,"nodeType":"147","endLine":42,"endColumn":10,"suggestions":"194"},{"ruleId":"145","severity":1,"message":"195","line":47,"column":8,"nodeType":"147","endLine":47,"endColumn":21,"suggestions":"196"},{"ruleId":"149","severity":1,"message":"197","line":65,"column":21,"nodeType":"151","messageId":"152","endLine":65,"endColumn":32},{"ruleId":"149","severity":1,"message":"198","line":66,"column":21,"nodeType":"151","messageId":"152","endLine":66,"endColumn":29},{"ruleId":"149","severity":1,"message":"199","line":67,"column":21,"nodeType":"151","messageId":"152","endLine":67,"endColumn":29},{"ruleId":"149","severity":1,"message":"200","line":10,"column":22,"nodeType":"151","messageId":"152","endLine":10,"endColumn":33},{"ruleId":"149","severity":1,"message":"187","line":11,"column":23,"nodeType":"151","messageId":"152","endLine":11,"endColumn":35},{"ruleId":"149","severity":1,"message":"186","line":12,"column":17,"nodeType":"151","messageId":"152","endLine":12,"endColumn":23},{"ruleId":"149","severity":1,"message":"201","line":17,"column":27,"nodeType":"151","messageId":"152","endLine":17,"endColumn":43},{"ruleId":"149","severity":1,"message":"202","line":18,"column":35,"nodeType":"151","messageId":"152","endLine":18,"endColumn":44},{"ruleId":"149","severity":1,"message":"203","line":18,"column":46,"nodeType":"151","messageId":"152","endLine":18,"endColumn":58},{"ruleId":"149","severity":1,"message":"204","line":19,"column":9,"nodeType":"151","messageId":"152","endLine":19,"endColumn":18},{"ruleId":"145","severity":1,"message":"205","line":25,"column":8,"nodeType":"147","endLine":25,"endColumn":10,"suggestions":"206"},{"ruleId":"145","severity":1,"message":"154","line":128,"column":8,"nodeType":"147","endLine":128,"endColumn":10,"suggestions":"207"},{"ruleId":"145","severity":1,"message":"208","line":181,"column":8,"nodeType":"147","endLine":181,"endColumn":15,"suggestions":"209"},{"ruleId":"149","severity":1,"message":"210","line":16,"column":9,"nodeType":"151","messageId":"152","endLine":16,"endColumn":18},{"ruleId":"145","severity":1,"message":"154","line":29,"column":8,"nodeType":"147","endLine":29,"endColumn":10,"suggestions":"211"},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userContext'. Either include it or remove the dependency array.","ArrayExpression",["214"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'setId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.",["215"],"'res' is assigned a value but never used.","'setApp' is assigned a value but never used.","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'app.job_id' and 'recruiter'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has a missing dependency: 'applications'. Either include it or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'job.recruiter_id' and 'recruiter'. Either include them or remove the dependency array.",["218"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'jobs' and 'props.match.params.id'. Either include them or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'visibleJobs'. Either include it or remove the dependency array.",["220"],"'Base64Downloader' is defined but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["221"],"'useEffect' is defined but never used.","'Modal' is defined but never used.","'setAlert' is assigned a value but never used.","'SOP' is assigned a value but never used.","'setSOP' is assigned a value but never used.","'rating' is assigned a value but never used.","'setRating' is assigned a value but never used.",["222"],["223"],"'setJob' is assigned a value but never used.","'setApplicant' is assigned a value but never used.","'setRedirect' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'job' and 'props.match.params.id'. Either include them or remove the dependency array.",["224"],"React Hook useEffect has missing dependencies: 'applications', 'job', and 'visibleApps'. Either include them or remove the dependency array.",["225"],"React Hook useEffect has missing dependencies: 'func', 'job.deadline', 'job.duration', 'job.max_app', 'job.max_pos', 'job.req_skills', 'job.salary', 'job.title', and 'job.type'. Either include them or remove the dependency array.",["226"],"React Hook useEffect has missing dependencies: 'setLoaded' and 'setModal'. Either include them or remove the dependency array.",["227"],"'newDeadline' is assigned a value but never used.","'pos_left' is assigned a value but never used.","'app_left' is assigned a value but never used.","'setEmployee' is assigned a value but never used.","'setDisplayRating' is assigned a value but never used.","'employees' is assigned a value but never used.","'setEmployees' is assigned a value but never used.","'netRating' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'applicant', 'job', and 'props.displayRating'. Either include them or remove the dependency array.",["228"],["229"],"React Hook useEffect has missing dependencies: 'employees' and 'visibleEmployees'. Either include them or remove the dependency array.",["230"],"'recRating' is assigned a value but never used.",["231"],"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"242","fix":"248"},{"desc":"244","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"234","fix":"260"},{"desc":"261","fix":"262"},{"desc":"234","fix":"263"},"Update the dependencies array to be: [userContext, userContext.id, userContext.role]",{"range":"264","text":"265"},"Update the dependencies array to be: [props.match.params.id]",{"range":"266","text":"267"},"Update the dependencies array to be: [app.job_id, job, recruiter]",{"range":"268","text":"269"},"Update the dependencies array to be: [applications, props]",{"range":"270","text":"271"},"Update the dependencies array to be: [job.recruiter_id, recruiter]",{"range":"272","text":"273"},"Update the dependencies array to be: [jobs, props.match.params.id]",{"range":"274","text":"275"},"Update the dependencies array to be: [filters, filters.order, jobs, visibleJobs]",{"range":"276","text":"277"},"Update the dependencies array to be: [user]",{"range":"278","text":"279"},{"range":"280","text":"275"},{"range":"281","text":"277"},"Update the dependencies array to be: [job, props.match.params.id]",{"range":"282","text":"283"},"Update the dependencies array to be: [applications, job, order, visibleApps]",{"range":"284","text":"285"},"Update the dependencies array to be: [func, job.deadline, job.duration, job.max_app, job.max_pos, job.req_skills, job.salary, job.title, job.type]",{"range":"286","text":"287"},"Update the dependencies array to be: [setLoaded, setModal, visibleJobs]",{"range":"288","text":"289"},"Update the dependencies array to be: [applicant, job, props.displayRating]",{"range":"290","text":"291"},{"range":"292","text":"267"},"Update the dependencies array to be: [employees, order, visibleEmployees]",{"range":"293","text":"294"},{"range":"295","text":"267"},[1905,1939],"[userContext, userContext.id, userContext.role]",[919,921],"[props.match.params.id]",[1426,1431],"[app.job_id, job, recruiter]",[3457,3464],"[applications, props]",[1013,1015],"[job.recruiter_id, recruiter]",[8536,8538],"[jobs, props.match.params.id]",[10165,10195],"[filters, filters.order, jobs, visibleJobs]",[1447,1449],"[user]",[5641,5643],[7333,7363],[9005,9007],"[job, props.match.params.id]",[9971,9978],"[applications, job, order, visibleApps]",[1357,1359],"[func, job.deadline, job.duration, job.max_app, job.max_pos, job.req_skills, job.salary, job.title, job.type]",[1441,1454],"[setLoaded, setModal, visibleJobs]",[1036,1038],"[applicant, job, props.displayRating]",[5942,5944],[8524,8531],"[employees, order, visibleEmployees]",[1310,1312]]