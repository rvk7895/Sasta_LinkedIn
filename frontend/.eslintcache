[{"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/index.js":"1","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/App.js":"2","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/reportWebVitals.js":"3","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/landing/landing.js":"4","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/userContext/userContext.js":"5","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/singIn/singIn.js":"6","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/signUp/SignUp.js":"7","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/profile.js":"8","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/navbar/navbar.js":"9","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/application.js":"10","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/jobs.js":"11","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/display.js":"12","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/edit.js":"13","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/loader/loader.js":"14","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/recJobs.js":"15","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/recApplication.js":"16","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/createEditJob.js":"17"},{"size":548,"mtime":1610988085838,"results":"18","hashOfConfig":"19"},{"size":1473,"mtime":1611164730950,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1610988085838,"results":"21","hashOfConfig":"19"},{"size":1308,"mtime":1610988085838,"results":"22","hashOfConfig":"19"},{"size":85,"mtime":1610988085838,"results":"23","hashOfConfig":"19"},{"size":3828,"mtime":1611136006360,"results":"24","hashOfConfig":"19"},{"size":6193,"mtime":1611164730950,"results":"25","hashOfConfig":"19"},{"size":2178,"mtime":1611137778180,"results":"26","hashOfConfig":"19"},{"size":1827,"mtime":1611119976650,"results":"27","hashOfConfig":"19"},{"size":4308,"mtime":1611132118150,"results":"28","hashOfConfig":"19"},{"size":12852,"mtime":1611156314470,"results":"29","hashOfConfig":"19"},{"size":6099,"mtime":1611131689480,"results":"30","hashOfConfig":"19"},{"size":11078,"mtime":1611044628570,"results":"31","hashOfConfig":"19"},{"size":208,"mtime":1610988085838,"results":"32","hashOfConfig":"19"},{"size":11131,"mtime":1611204156364,"results":"33","hashOfConfig":"19"},{"size":6241,"mtime":1611139822260,"results":"34","hashOfConfig":"19"},{"size":12815,"mtime":1611204421124,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"16a9wqr",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/index.js",[],["77","78"],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/App.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/reportWebVitals.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/landing/landing.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/userContext/userContext.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/singIn/singIn.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/signUp/SignUp.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/profile.js",["79","80"],"import React, { useState, useEffect, useContext } from 'react'\nimport { Row, Col, Button, Container } from 'react-bootstrap'\nimport axios from 'axios'\nimport Display from './display'\nimport Edit from './edit'\nimport CustomNav from '../navbar/navbar'\nimport Loader from '../loader/loader'\nimport { UserContext } from '../userContext/userContext'\n\nconst Profile = (props) => {\n\n    const [edit, setEdit] = useState(false);\n    const [user, setUser] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const { id } = useContext(UserContext);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/users/user/${props.match.params.id}`)\n                setUser(res.data);\n                setLoaded(true);\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        fetchData();\n    }, [])\n\n\n    const handleEdit = async () => {\n        try {\n            const res = await axios.post('/api/users/update', user);\n            setEdit(false);\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n                {id === props.match.params.id && \n                    < Row className=\"text-right\">\n                    <Col style={{ marginRight: '100px' }}>\n                    {!edit ? (\n                        <Button variant=\"outline-info\" onClick={() => setEdit(true)}>Edit Profile</Button>\n                    ) : (\n                            <div>\n                                <Button variant=\"outline-success\" className=\"ml-3\" onClick={handleEdit}>Save</Button>\n                                <Button variant=\"outline-danger\" className=\"ml-3\" onClick={() => setEdit(false)}>Cancel</Button>\n                            </div>\n                        )}\n                </Col>\n                </Row>}\n\n            {!loaded ? (<Row className=\"justify-content-center\"><Loader /></Row>) : !edit ? <Display user={user} /> : <Edit user={user} setUser={setUser} />}\n            </Container>\n        </div >\n    )\n}\n\nexport default Profile\n\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/navbar/navbar.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/application.js",["81","82","83","84","85"],"import React, { useState, useEffect } from 'react'\nimport { Container, Jumbotron, Row, Card, Col } from 'react-bootstrap';\nimport CustomNav from '../navbar/navbar';\nimport axios from 'axios'\nimport Loader from '../loader/loader';\nimport { v4 as uid } from 'uuid'\n\nconst App = (props) => {\n\n    const [app, setApp] = useState(props.app);\n    const [job, setJob] = useState({});\n    const [recruiter, setRecruiter] = useState({});\n    const [modal, setModal] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n\n        const fetchRecruiter = async () => {\n            try {\n                console.log(job.recruiter_id);\n                const res = await axios.get(`/api/users/user/${job.recruiter_id}`);\n                console.log(res)\n                setRecruiter(res.data);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/jobs/job/${app.job_id}`)\n                console.log(res);\n                if (!job._id) setJob(res.data);\n                console.log(job);\n                if (job._id) {\n                    fetchRecruiter();\n                }\n                if (recruiter) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        fetchData();\n    }, [job])\n\n    return (\n        <div>\n            <Card>\n                {!loaded ? <Row className=\"justify-content-center text-center\"><Loader /></Row> : <div>\n                    <Row style={{ margin: \"0.1rem\" }}>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Job Title:</span>{` ${job.title}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Recruiter Name:</span>{` ${recruiter.name}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <p><span style={{fontWeight:\"bold\"}}>Recruiter Email:</span>{` ${recruiter.email}`}</p>\n                        </Col>\n                        <Col className=\"text-center\">\n                            <span style={{fontWeight:\"bold\"}}>Status:</span>{app.status === 'accepted' ? <p style={{ color: \"green\" }}> Accepted</p> :\n                                app.status === 'rejected' || app.status === 'deleted' ? <p style={{ color: \"red\" }}>{` ${app.status.charAt(0).toUpperCase() + app.status.substr(1).toLowerCase()}`}</p> :\n                                    <p> Pending</p>}\n                        </Col>\n                    </Row>\n                </div>}\n            </Card>\n        </div>\n    )\n}\n\nconst Application = (props) => {\n    const [applications, setApplications] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/applications/app/${props.match.params.id}`)\n                console.log(res);\n                console.log(applications.length)\n                setApplications(res.data);\n                if (applications) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }\n        , [props])\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1>My Applications</h1>\n            </Jumbotron>\n            <div style={{ margin: \"40px\" }} />\n            <Container>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {applications.length === 0 ? <Row className=\"text-center justify-content-center\">Kahin apply nahi kia toh yahan par kyon aaye ho puttar</Row> : (\n                            <div>\n                                {applications.map(app => <App key={uid()} app={app} />)}\n                            </div>\n                        )}\n                    </div>\n                )}\n            </Container>\n        </div>\n    )\n}\n\nexport default Application\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/jobs.js",["86","87","88"],"import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport { Container, Jumbotron, Row, Card, Col, Badge, Button, Modal, FormControl, Alert, Dropdown } from 'react-bootstrap';\nimport CustomNav from '../navbar/navbar';\nimport Loader from '../loader/loader';\nimport { v4 as uid } from 'uuid';\nimport Fuse from 'fuse.js'\n\nconst Job = (props) => {\n\n    const { job, app_id, setAlert } = props;\n    const [recruiter, setRecruiter] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [modal, setModal] = useState(false);\n    const [SOP, setSOP] = useState('');\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/users/user/${job.recruiter_id}`);\n                setRecruiter(res.data)\n                if (recruiter) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }, []);\n\n    const handleSubmit = async () => {\n        try {\n            const res = await axios.post('/api/applications/apply', {\n                app_id,\n                job_id: job._id,\n                SOP,\n                rec_id: job.recruiter_id\n            });\n            console.log(res.data)\n            setModal(false);\n            setAlert(true)\n\n        }\n        catch (err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div>\n            <Card className=\"mb-3\">\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={12} sm={12}>\n                                <h3>{job.title}</h3>\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={12} sm={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Recruiter Name:</span>{` ${recruiter.name}`}\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={12} sm={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Recruiter Email:</span>{` ${recruiter.email}`}\n                            </Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Salary:</span>{` ${job.salary}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Type:</span>{` ${job.type}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Duration:</span>{job.duration === 0 ? \" Indefinite\" : ` ${job.duration} Months`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Deadline:</span>{` ${` ${job.deadline.getDate()}`}-${job.deadline.getMonth()+1}-${job.deadline.getFullYear()}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Positions Left:</span>{` ${job.pos_left}`}</Col>\n                            <Col lg={2} sm={6} xs={6}><span style={{ fontWeight: \"bold\" }}>Applications Left:</span>{` ${job.app_left}`}</Col>\n                        </Row>\n                        <Row style={{ margin: \"0.1rem\" }}>\n                            <Col lg={6} sm={12} xs={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Required Skills:</span>{job.req_skills.map(skill => <Badge key={uid()} pill variant=\"info\" style={{ margin: \"0.1rem\" }}>{skill}</Badge>)}\n                            </Col>\n                            <Col lg={4} sm={12} xs={12}>\n                                <span style={{ fontWeight: \"bold\" }}>Rating: </span>TODO\n                             </Col>\n                            <Col lg={2} sm={12} xs={12}>\n                                <Button variant=\"success\" onClick={() => setModal(true)} disabled={!job.pos_left || !job.app_left ? true : false} block>Apply</Button>\n                            </Col>\n                        </Row>\n                        <Modal centered size=\"lg\" show={modal} onHide={() => setModal(false)}>\n                            <Modal.Header closeButton>\n                                <h3>\n                                    Applying for {job.title}\n                                </h3>\n                            </Modal.Header>\n                            <Modal.Body>\n                                <span style={{ fontWeight: \"bold\" }}>Write and SOP of atleast 250 words</span>\n                                <FormControl as=\"textarea\" rows={3} placeholder=\"SOP\" value={SOP} style={{ margin: \"0.1rem\" }} onChange={e => setSOP(e.target.value)} />\n                                <Button onClick={handleSubmit} variant=\"success\" disabled={SOP.length < 10 ? true : false} style={{ marginTop: \"0.5rem\" }} block> Submit </Button>\n                            </Modal.Body>\n                        </Modal>\n                    </div>)}\n            </Card>\n        </div>\n    )\n}\n\nconst Jobs = (props) => {\n\n    const [jobs, setJobs] = useState([]);\n    const [loaded, setLoaded] = useState(false);\n    const [alert, setAlert] = useState(false);\n    const [visibleJobs, setVisibleJobs] = useState([]);\n    const [filters, setFilters] = useState({\n        search: '',\n        typeOfJob: '',\n        maxSalary: '',\n        minSalary: '',\n        order: '',\n        duration: 0\n    })\n    const [minSalary, setMinSalary] = useState('');\n    const [maxSalary, setMaxSalary] = useState('');\n    \n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get('/api/jobs/all');\n                res.data = res.data.map(data => { const deadline = new Date(data.deadline); return { ...data, deadline } })\n                const res2 = await axios.get(`/api/applications/app/${props.match.params.id}`)\n                console.log(res2)\n                let jobsNotApplied = [];\n                for (let i = 0; i < res.data.length; i++) {\n                    let applied = false;\n                    for (let j = 0; j < res2.data.length; j++) {\n                        if (res2.data[j].job_id === res.data[i]._id) applied = true;\n                    }\n                    if (!applied) jobsNotApplied.push(res.data[i]);\n                }\n                setJobs(jobsNotApplied);\n                setVisibleJobs(jobsNotApplied);\n                if (jobs) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }, [])\n\n\n    useEffect(() => {\n        let filtered = jobs;\n        setLoaded(false);\n\n        //search\n        const fuseOptions = {\n            keys: ['title']\n        }\n\n        const fuse = new Fuse(filtered, fuseOptions);\n        if (filters.search !== '') {\n            const result = fuse.search(filters.search)\n            filtered = result.map(searchResults => searchResults.refIndex).map(idx => filtered[idx])\n        }\n\n        if (filters.typeOfJob !== '') filtered = filtered.filter(job => job.type === filters.typeOfJob);\n        if (filters.minSalary !== '') filtered = filtered.filter(job => job.salary >= parseInt(filters.minSalary));\n        if (filters.maxSalary !== '') filtered = filtered.filter(job => job.salary <= parseInt(filters.maxSalary));\n        if (filters.duration !== 0) filtered = filtered.filter(job => job.duration < filters.duration);\n\n        //order\n        if (filters.order === \"Salary Ascending\") filtered.sort((a, b) => { console.log(\"heelo\"); return a.salary - b.salary })\n        if (filters.order === \"Salary Descending\") filtered.sort((a, b) => -(a.salary - b.salary))\n        if (filters.order === \"Duration Ascending\") filtered.sort((a, b) => a.duration - b.duration)\n        if (filters.order === \"Duration Descending\") filtered.sort((a, b) => -(a.duration - b.duration))\n        if (filters.order === \"Rating Ascending\") filtered.sort((a, b) => a.rating - b.rating)\n        if (filters.order === \"Rating Descending\") filtered.sort((a, b) => -(a.rating - b.rating))\n        setVisibleJobs([...filtered]);\n        if (visibleJobs) setLoaded(true);\n    }, [filters, filters.order, jobs]);\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1>Job Listings</h1>\n            </Jumbotron>\n            <Container fluid style={{ maxWidth: \"1250px\" }}>\n                <Row className=\"justify-content-center mb-3\">\n                    <Col>\n                        <FormControl type=\"text\" value={filters.search} onChange={e => setFilters({ ...filters, search: e.target.value })} placeholder=\"Search\" />\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\">\n                                {filters.typeOfJob === '' ? \"Type of Job\" : filters.typeOfJob}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {['Work from Home', 'Part-Time', 'Full-Time'].map(x => <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, typeOfJob: x })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Row className=\"justfiy-content-center mb-3\">\n                            <Col>\n                                <FormControl value={minSalary} onChange={e => setMinSalary(e.target.value)} type=\"text\" placeholder=\"Min Salary\" />\n                            </Col>\n                            <Col>\n                                <FormControl value={maxSalary} onChange={e => setMaxSalary(e.target.value)} type=\"text\" placeholder=\"Max Salary\" />\n                            </Col>\n                        </Row>\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => setFilters({ ...filters, minSalary, maxSalary })}>Apply Salary</Button>\n                        </Row>\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"150px\" }}>\n                                {filters.duration === 0 ? \"Duration\" : filters.duration}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {[1, 2, 3, 4, 5, 6, 7].map(x => <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, duration: x })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Dropdown>\n                            <Dropdown.Toggle variant=\"secondary\" block style={{ maxWidth: \"180px\" }}>\n                                {filters.order === '' ? \"Order\" : filters.order}\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu>\n                                {[\"Salary Ascending\", \"Salary Descending\", \"Duration Ascending\", \"Duration Descending\", \"Rating Ascending\", \"Rating Descending\"].map(x =>\n                                    <Dropdown.Item key={x} onClick={() => setFilters({ ...filters, order: `${x}` })}>{x}</Dropdown.Item>)}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col>\n                        <Button variant=\"outline-warning\" onClick={() => {\n                            setFilters({\n                                search:'',\n                                typeOfJob: '',\n                                maxSalary: '',\n                                minSalary: '',\n                                order: '',\n                                duration: 0\n                            }); setMinSalary(''); setMaxSalary(''); setVisibleJobs(jobs);\n                        }}> Clear Filters</Button>\n                    </Col>\n                </Row>\n                <Alert dismissible variant=\"success\" show={alert} onClose={() => setAlert(false)}>Applied!</Alert>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {visibleJobs.map(job => <Job job={job} key={job._id} app_id={props.match.params.id} setAlert={setAlert} />)}\n                    </div>\n                )}\n            </Container>\n        </div>\n    )\n}\n\nexport default Jobs\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/display.js",["89"],"import React, { useEffect, useContext } from 'react'\nimport { Container, Row, Image, Col, Card, Badge } from 'react-bootstrap'\nimport { UserContext } from '../userContext/userContext'\nimport {v4 as uid} from 'uuid'\n\nconst Recruiter = (props) => {\n    const user = props.user;\n\n    return (\n        <div>\n            <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                <Col sm={6} className=\"text-right\"> Contact No. :</Col>\n                <Col sm={6} >{user.contact_no}</Col>\n            </Row>\n            <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                <Col sm={6} className=\"text-right\">Bio :</Col>\n                <Col sm={6} />\n            </Row>\n            <Row className=\"text-center justify-content-center\" style={{ fontSize: \"1.25rem\" }}>\n                {user.hasOwnProperty('bio') ? user.bio : 'kuch bhi nahi hai iske baare mein'}\n            </Row>\n        </div>\n    )\n}\n\nconst Applicant = (props) => {\n    const { user } = props;\n\n    useEffect(() => {\n        // console.log(user)\n    }, [user])\n\n    return (\n        <div>\n            <Row>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Educational Institutes\n                </Row>\n                    {user.insti.length ? (\n                        <div>\n                            {user.insti.map(ins =>\n                                <div key={uid()}>\n                                    <Card className=\"mb-3\">\n                                        <Card.Body>\n                                            <Row className=\"mb-1\">\n                                                <Col sm={12}>\n                                                    <h2>{ins.name}</h2>\n                                                </Col>\n                                            </Row>\n                                            <Row className=\"mb-1\">\n                                                <Col sm={12} className=\"text-left\">\n                                                    {ins.starty} - {ins.endy}\n                                                </Col>\n                                            </Row>\n                                        </Card.Body>\n                                    </Card>\n                                </div>\n                            )}\n                        </div>\n                    ) : (\n                            <div className=\"text-center\">\n                                Padhai vadhai karo yeh kya kar rahe ho\n                            </div>\n                        )}\n                </Col>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Skills\n                </Row>\n                    {user.skills.length ? (\n                        <div>\n                            {user.skills.map(skill => <Badge key={uid()} pill variant=\"info\" style={{ margin: \"5px\", fontSize: \"30px\" }}>{skill.name}</Badge>)}\n                        </div>\n                    ) :\n                        (\n                            <div className=\"text-center\">\n                                Kuch nahi ata isko\n                            </div>\n                        )}\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst Display = (props) => {\n\n    const { user } = props;\n    const { id } = useContext(UserContext);\n    // const [userRating, setUserRating] = useState(0);\n    // let finalRating = 0.0;\n\n    // const calcRating = () => {\n    //     const { rating } = user;\n    //     let total = 0;\n    //     rating.forEach(rating => total + rating.rating);\n    //     finalRating = total / rating.lenght;\n    // }\n\n    // useEffect(() => {\n    //     console.log(props)\n    //     console.log(id)\n    // }, [user])\n\n    return (\n        <div>\n            <div style={{ margin: \"20px\" }} />\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Image src={process.env.PUBLIC_URL + '/images/avatar.png'} roundedCircle style={{ height: '300px', width: '300px', borderStyle: \"solid\", borderWidth: \"5px\" }} />\n                </Row>\n                <div style={{ margin: \"40px\" }} />\n                {/* <Row className=\"justify-content-center mb-3\">\n                    <Col>Rating: {finalRating}</Col>\n                    {id !== user._id &&\n                        <Col>\n                            <Dropdown variant='secondary' title=\"Give Rating\">\n                                <Dropdown.Item onClick={()=>setUserRating(1)}>1</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(2)}>2</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(3)}>3</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(4)}>4</Dropdown.Item>\n                                <Dropdown.Item onClick={()=>setUserRating(5)}>5</Dropdown.Item>\n                            </Dropdown>\n                        </Col>}\n                </Row> */}\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Name :</Col>\n                    <Col sm={6} >{user.name}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Email :</Col>\n                    <Col sm={6} >{user.email}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Role :</Col>\n                    <Col sm={6} >{user.role}</Col>\n                </Row>\n                {user.role === 'recruiter' ? <Recruiter user={user} /> : <Applicant user={user} />}\n            </Container>\n        </div>\n    )\n}\n\nexport default Display\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/profile/edit.js",["90"],"import React, { useEffect, useState } from 'react'\nimport { Container, Row, Col, Image, Form, InputGroup, FormControl, Button, DropdownButton, Dropdown } from 'react-bootstrap'\nimport { v4 as uid } from 'uuid'\n\nconst Recruiter = (props) => {\n\n    const {\n        user, setUser\n    } = props\n\n    return (\n        <div>\n            <Form.Group controlId='formContact' className=\"justify-content-center mb-3\">\n                <Row>\n                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Contact No.</Form.Label>\n                </Row>\n                <Row>\n                    <Col sm={12}>\n                        <Form.Control type='text' value={user.contact_no} placeholder=\"Contact No.\" onChange={e => setUser({ ...user, contact_no: e.target.value })} />\n                    </Col>\n                </Row>\n            </Form.Group>\n            <Form.Group controlId='formBio' className=\"justify-content-center mb-3\">\n                <Row>\n                    <Form.Label column sm={12} style={{ fontSize: '20px' }}>Bio</Form.Label>\n                </Row>\n                <Row>\n                    <Col sm={12}>\n                            <Form.Control as=\"textarea\" rows={3} value={user.bio} placeholder=\"Bio\" onChange={e => setUser({ ...user, bio: e.target.value })} />\n                    </Col>\n                </Row>\n            </Form.Group>\n        </div>\n    )\n}\n\nconst Applicant = (props) => {\n\n    const { user,\n        setUser\n    } = props;\n\n    const [insti, setInsti] = useState(user.insti)\n    const [skills, setSkills] = useState(user.skills)\n\n    const skillCheck = () => {\n        if (skills.length !== user.skills.length) return true\n        for (let i = 0; i < user.skills.length; i++) {\n            let flag = false;\n            for (let j = 0; j < skills.length; j++) {\n                if (skills[j].id === user.skills[i].id && skills[j].name === user.skills[i].name && skills[j].starty === user.skills[i].starty && skills[j].endy === user.skills[i].endy) flag = true\n            }\n            if (!flag) return true\n        }\n\n        return false;\n    }\n\n    const lengthCheck = () => {\n        if (insti.length !== user.insti.length) return true\n        for (let i = 0; i < user.insti.length; i++) {\n            let flag = false;\n            for (let j = 0; j < insti.length; j++) {\n                if (insti[j].id === user.insti[i].id && insti[j].name === user.insti[i].name && insti[j].starty === user.insti[i].starty && insti[j].endy === user.insti[i].endy) flag = true\n            }\n            if (!flag) return true\n        }\n\n        return false;\n    }\n\n    return (\n        <div>\n            <Row>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Educational Institutes\n                </Row>\n                    {insti.map(ins => <div key={uid()}>\n                        <Row className=\"mb-3\">\n                            <Col sm={9}>\n                                <Form.Control type='text' value={ins.name} onChange={e => {\n                                    const name = e.target.value\n                                    setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                        ...insti,\n                                        name\n                                    } : insti));\n                                }} placeholder=\"Name of Institution\"></Form.Control>\n                            </Col>\n                            <Col sm={3}>\n                                <Button onClick={() => {\n                                    setInsti(currInsti => currInsti.filter(x => x.id !== ins.id))\n                                }} variant='outline-danger' block>Delete</Button>\n                            </Col>\n                        </Row>\n                        <Row className=\"mb-3\">\n                            <Col>\n                                <Form.Control type='text' value={ins.starty} onChange={e => {\n                                    const starty = e.target.value\n                                    setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                        ...insti,\n                                        starty\n                                    } : insti));\n                                }} placeholder=\"Starting year\"></Form.Control>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-3\">\n                                    <FormControl type='text' value={ins.endy} onChange={e => {\n                                        const endy = e.target.value\n                                        setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                            ...insti,\n                                            endy\n                                        } : insti));\n                                    }} placeholder=\"Ending Year\">\n                                    </FormControl>\n                                    <InputGroup.Append>\n                                        <Button variant=\"outline-secondary\" onClick={() => {\n                                            const endy = \"Present\";\n                                            setInsti(currInsti => currInsti.map(insti => insti.id === ins.id ? {\n                                                ...insti,\n                                                endy\n                                            } : insti));\n                                        }} >Present</Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </div>)}\n                    {lengthCheck() &&\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => { setUser({ ...user, insti }); console.log(user) }}>Save</Button>\n                        </Row>}\n                    <Row className=\"justify-content-center mb-3\" >\n                        <Button onClick={() => setInsti([...insti, { id: uid(), name: \"\", starty: \"\", endy: \"\" }])} variant='outline-info' >Insert Institution</Button>\n                    </Row>\n                </Col>\n                <Col sm={12} lg={6}>\n                    <Row className=\"justify-content-center text-center\" style={{ fontSize: \"2rem\" }}>\n                        Skills\n                    </Row>\n                    {skills.map(skill =>\n                        <div key={uid()}>\n                            <Row className=\"mb-3\">\n                                <Col sm={9}>\n                                    <Form.Control type='text' value={skill.name} onChange={e => {\n                                        const name = e.target.value\n                                        setSkills(currSkills => currSkills.map(currSkill => currSkill.id === skill.id ? {\n                                            ...currSkill,\n                                            name\n                                        } : currSkill));\n                                    }} placeholder=\"Skill name\"></Form.Control>\n                                </Col>\n                                <Col sm={3}>\n                                    <Button onClick={() => {\n                                        setSkills(currSkills => currSkills.filter(x => x.id !== skill.id))\n                                    }} variant='outline-danger' block>Delete</Button>\n                                </Col>\n                            </Row>\n                        </div>)}\n                    {skillCheck() &&\n                        <Row className=\"justify-content-center mb-3\">\n                            <Button variant=\"outline-success\" onClick={() => { setUser({ ...user, skills }) }}>Save</Button>\n                        </Row>}\n                        <Row className=\"justify-content-center mb-3\">\n                            <DropdownButton title=\"Choose\">\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"Python\"}])}>Python</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"Java\"}])}>Java</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"C++\"}])}>C++</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"C#\"}])}>C#</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"Go\"}])}>Go</Dropdown.Item>\n                                <Dropdown.Item onClick={() => setSkills([...skills, {id:uid(), name:\"Julia\"}])}>Julia</Dropdown.Item>\n                            </DropdownButton>\n                        </Row>\n                    <Row className=\"justify-content-center mb-3\" >\n                        <Button onClick={() => setSkills([...skills, { id: uid(), name: \"\" }])} variant='outline-info' >Insert Skill</Button>\n                    </Row>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst Edit = (props) => {\n\n    const {\n        user,\n        setUser\n    } = props\n\n    return (\n        <div>\n            <div style={{ margin: \"20px\" }} />\n            <Container>\n                <Row className=\"justify-content-center\">\n                    <Image src={process.env.PUBLIC_URL + '/images/avatar.png'} roundedCircle style={{ height: '300px', width: '300px', borderStyle: \"solid\", borderWidth: \"5px\" }} />\n                </Row>\n                <div style={{ margin: \"40px\" }} />\n                <Form.Group controlId='formName' className=\"justify-content-center mb-3\">\n                    <Row>\n                        <Form.Label column sm={12} style={{ fontSize: '20px' }}>Name</Form.Label>\n                    </Row>\n                    <Row>\n                        <Col sm={12}>\n                            <Form.Control type='text' value={user.name} placeholder=\"Name\" onChange={e => setUser({ ...user, name: e.target.value })} />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Email :</Col>\n                    <Col sm={6} >{user.email}</Col>\n                </Row>\n                <Row className=\"justify-content-center mb-3\" style={{ fontSize: \"2rem\" }}>\n                    <Col sm={6} className=\"text-right\"> Role :</Col>\n                    <Col sm={6} >{user.role}</Col>\n                </Row>\n                {user.role === 'recruiter' ? <Recruiter user={user} setUser={setUser} /> : <Applicant user={user} setUser={setUser} />}\n            </Container>\n        </div>\n    )\n}\n\nexport default Edit\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/loader/loader.js",[],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/recJobs.js",["91","92","93","94","95","96"],"/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/application/recApplication.js",["97","98"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { Container, Jumbotron, Row, Col, Button, Card } from 'react-bootstrap'\nimport Loader from '../loader/loader';\nimport CustomNav from '../navbar/navbar'\nimport { Redirect } from 'react-router-dom'\nimport { v4 as uid } from 'uuid'\n\nconst App = (props) => {\n    const [app, setApp] = useState(props.app);\n    const [job, setJob] = useState({});\n    const [applicant, setApplicant] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const [redirect, setRedirect] = useState(false);\n\n    useEffect(() => {\n\n        const fetchApplicant = async () => {\n            try {\n                console.log(job.recruiter_id);\n                const res = await axios.get(`/api/users/user/${app.app_id}`);\n                console.log(res)\n                setApplicant(res.data);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/jobs/job/${app.job_id}`)\n                console.log(res);\n                if (!job._id) setJob(res.data);\n                console.log(job);\n                if (job._id) {\n                    fetchApplicant();\n                }\n                if (applicant) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        };\n\n        fetchData();\n    }, [job])\n\n    const handleSuccess = async () => {\n        if (app.status === 'pending') {\n            try {\n                const res = await axios.post('/api/applications/shortlist', {\n                    app_id: applicant._id,\n                    job_id: job._id\n                });\n                setApp({ ...app, status: \"shortlisted\" });\n                console.log(res);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n\n        if (app.status === 'shortlisted') {\n            try {\n                const res = await axios.post('/api/applications/accept', {\n                    app_id: applicant._id,\n                    job_id: job._id\n                });\n                setApp({ ...app, status: \"accepted\" });\n                console.log(res);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n    }\n\n    const handleReject = async () => {\n        try {\n            const res = await axios.post('/api/applications/reject', {\n                app_id: applicant._id,\n                job_id: job._id\n            });\n            setApp({ ...app, status: \"rejected\" });\n            console.log(res);\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    return (\n        <div>\n            <Card>\n                {!loaded ? <Row className=\"justify-content-center text-center\"><Loader /></Row> : <div>\n                    <Row style={{ margin: \"0.1rem\" }}>\n                        <Col className=\"text-center my-auto\" lg={4} sm={6} xs={12}>\n                            <div><p><span style={{ fontWeight: \"bold\" }}>Job Title:</span>{` ${job.title}`}</p></div>\n                        </Col>\n                        <Col className=\"text-center my-auto\" lg={4} sm={6} xs={12}>\n                            <Button variant=\"outline-info\" onClick={() => setRedirect(true)} className=\"mb-1\">Applicant Details</Button>\n                        </Col>\n                        <Col className=\"text-center my-auto\" lg={4} sm={6} xs={12}>\n                            <Row className=\"justify-content-center\">\n                                {app.status === 'rejected' ? <Col className=\"justify-content-center text-center my-auto\"><Button variant=\"danger\" className=\"mb-1\" disabled>Rejected</Button></Col> : (\n                                    <div>\n                                        <Col className=\"text-center justift-content-center my-auto\">\n                                            <Button disabled={app.status === 'accepted' ? true : false} variant=\"success\" onClick={handleSuccess} className=\"mb-1\">\n                                                {app.status === 'pending' ? 'Shortlist' : 'Accept'}\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"text-center justift-content-center my-auto\">\n                                            <Button variant=\"danger\" disabled={app.status === 'accepted' ? true : false} onClick={handleReject} className=\"mb-1\">Reject</Button>\n                                        </Col>\n                                    </div>\n                                )}\n                            </Row>\n                        </Col>\n                    </Row>\n                </div>}\n                {redirect && <Redirect to={`/profile/${applicant._id}`} />}\n            </Card>\n        </div>\n    )\n}\n\nconst RecApplication = (props) => {\n\n    const [applications, setApplications] = useState();\n    const [loaded, setLoaded] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const res = await axios.get(`/api/applications/rec/${props.match.params.id}`);\n                if (!applications) setApplications([...res.data]);\n                if (applications) setLoaded(true);\n            }\n            catch (err) {\n                console.log(err)\n            }\n        }\n        fetchData();\n    }, [applications])\n\n    return (\n        <div>\n            <Container>\n                <CustomNav />\n            </Container>\n            <Jumbotron>\n                <h1>My Applications</h1>\n            </Jumbotron>\n            <Container>\n                {!loaded ? <Row className=\"justify-content-center\"><Loader /></Row> : (\n                    <div>\n                        {applications.lenght === 0 ? <Row className=\"justify-content-center text-center\">Kisine nahi kia teri jobs mein apply</Row> : (\n                            applications.map(app => <App app={app} key={uid()} />)\n                        )}\n                    </div>\n                )}\n            </Container>\n        </div>\n    )\n}\n\nexport default RecApplication\n","/home/rvk7895/Projects/DASS_Assignment_1/frontend/src/components/jobs/createEditJob.js",["99"],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":29,"column":8,"nodeType":"106","endLine":29,"endColumn":10,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":34,"column":19,"nodeType":"110","messageId":"111","endLine":34,"endColumn":22},{"ruleId":"108","severity":1,"message":"112","line":10,"column":17,"nodeType":"110","messageId":"111","endLine":10,"endColumn":23},{"ruleId":"108","severity":1,"message":"113","line":13,"column":12,"nodeType":"110","messageId":"111","endLine":13,"endColumn":17},{"ruleId":"108","severity":1,"message":"114","line":13,"column":19,"nodeType":"110","messageId":"111","endLine":13,"endColumn":27},{"ruleId":"104","severity":1,"message":"115","line":47,"column":8,"nodeType":"106","endLine":47,"endColumn":13,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"117","line":94,"column":11,"nodeType":"106","endLine":94,"endColumn":18,"suggestions":"118"},{"ruleId":"104","severity":1,"message":"119","line":29,"column":8,"nodeType":"106","endLine":29,"endColumn":10,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"121","line":147,"column":8,"nodeType":"106","endLine":147,"endColumn":10,"suggestions":"122"},{"ruleId":"104","severity":1,"message":"123","line":179,"column":8,"nodeType":"106","endLine":179,"endColumn":38,"suggestions":"124"},{"ruleId":"108","severity":1,"message":"125","line":90,"column":13,"nodeType":"110","messageId":"111","endLine":90,"endColumn":15},{"ruleId":"108","severity":1,"message":"126","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":26},{"ruleId":"108","severity":1,"message":"127","line":3,"column":63,"nodeType":"110","messageId":"111","endLine":3,"endColumn":68},{"ruleId":"108","severity":1,"message":"128","line":12,"column":18,"nodeType":"110","messageId":"111","endLine":12,"endColumn":26},{"ruleId":"108","severity":1,"message":"129","line":15,"column":12,"nodeType":"110","messageId":"111","endLine":15,"endColumn":15},{"ruleId":"108","severity":1,"message":"130","line":15,"column":17,"nodeType":"110","messageId":"111","endLine":15,"endColumn":23},{"ruleId":"104","severity":1,"message":"121","line":102,"column":8,"nodeType":"106","endLine":102,"endColumn":10,"suggestions":"131"},{"ruleId":"104","severity":1,"message":"123","line":134,"column":8,"nodeType":"106","endLine":134,"endColumn":38,"suggestions":"132"},{"ruleId":"104","severity":1,"message":"133","line":47,"column":8,"nodeType":"106","endLine":47,"endColumn":13,"suggestions":"134"},{"ruleId":"104","severity":1,"message":"105","line":145,"column":8,"nodeType":"106","endLine":145,"endColumn":22,"suggestions":"135"},{"ruleId":"104","severity":1,"message":"136","line":40,"column":8,"nodeType":"106","endLine":40,"endColumn":10,"suggestions":"137"},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.match.params.id'. Either include it or remove the dependency array.","ArrayExpression",["140"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","'setApp' is assigned a value but never used.","'modal' is assigned a value but never used.","'setModal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'app.job_id' and 'recruiter'. Either include them or remove the dependency array.",["141"],"React Hook useEffect has a missing dependency: 'applications'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'job.recruiter_id' and 'recruiter'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has missing dependencies: 'jobs' and 'props.match.params.id'. Either include them or remove the dependency array.",["144"],"React Hook useEffect has a missing dependency: 'visibleJobs'. Either include it or remove the dependency array.",["145"],"'id' is assigned a value but never used.","'useEffect' is defined but never used.","'Modal' is defined but never used.","'setAlert' is assigned a value but never used.","'SOP' is assigned a value but never used.","'setSOP' is assigned a value but never used.",["146"],["147"],"React Hook useEffect has missing dependencies: 'app.app_id', 'app.job_id', and 'applicant'. Either include them or remove the dependency array.",["148"],["149"],"React Hook useEffect has missing dependencies: 'func', 'job.deadline', 'job.duration', 'job.max_app', 'job.max_pos', 'job.req_skills', 'job.salary', 'job.title', and 'job.type'. Either include them or remove the dependency array.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"159","fix":"163"},{"desc":"161","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [props.match.params.id]",{"range":"171","text":"172"},"Update the dependencies array to be: [app.job_id, job, recruiter]",{"range":"173","text":"174"},"Update the dependencies array to be: [applications, props]",{"range":"175","text":"176"},"Update the dependencies array to be: [job.recruiter_id, recruiter]",{"range":"177","text":"178"},"Update the dependencies array to be: [jobs, props.match.params.id]",{"range":"179","text":"180"},"Update the dependencies array to be: [filters, filters.order, jobs, visibleJobs]",{"range":"181","text":"182"},{"range":"183","text":"180"},{"range":"184","text":"182"},"Update the dependencies array to be: [app.app_id, app.job_id, applicant, job]",{"range":"185","text":"186"},"Update the dependencies array to be: [applications, props.match.params.id]",{"range":"187","text":"188"},"Update the dependencies array to be: [func, job.deadline, job.duration, job.max_app, job.max_pos, job.req_skills, job.salary, job.title, job.type]",{"range":"189","text":"190"},[919,921],"[props.match.params.id]",[1426,1431],"[app.job_id, job, recruiter]",[3440,3447],"[applications, props]",[982,984],"[job.recruiter_id, recruiter]",[6788,6790],"[jobs, props.match.params.id]",[8389,8419],"[filters, filters.order, jobs, visibleJobs]",[4723,4725],[6319,6349],[1476,1481],"[app.app_id, app.job_id, applicant, job]",[5503,5517],"[applications, props.match.params.id]",[1312,1314],"[func, job.deadline, job.duration, job.max_app, job.max_pos, job.req_skills, job.salary, job.title, job.type]"]